{% extends "pages/layouts/layout-dashboard.html.twig" %}

{% block page %}
    {% set page = page | merge({
        "title"       : "Drones",
        "description" : "manage drones"
    }) %}
    {{ parent() }}
{% endblock %}

{% block content %}
<div class="page-head">
    <div class="page-title">
        <h1>{{page.title}}
            <small>{{page.description}}</small>
        </h1>
    </div>
</div>

<br>

<div class="row">
    <div class="col-md-12">
        <div class="portlet light bordered">
            <div class="portlet-title tabbable-line" id="notification_portlet">
                <div class="caption ">
                    <span class="caption-subject font-blue-sharp bold uppercase">Drone Settings</span>
                    <span class="caption-helper"></span>
                </div>
                <div class="tools">
                    <a href="" class="fullscreen"> </a>
                    <a href="" class="reload" id="datatables_refresh"> </a>
                </div>
            </div>
            <div class="portlet-body" id="notification_portlet_body">
                <table id="drones" class="table table-sorting table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Action</th>
                            <th>ID</th>
                            <th>Name</th>
                            {% if show_venue == true %}<th>Venue</th>{% endif %}
                            <th>Local IP</th>
                            <th>RSSI</th>
                            <th>Model</th>
                            <th>SW version</th>
                            <th>State</th>
                            <th>Capturing</th>
                            <th>WLAN</th>
                            <th>Temp</th>
                            <th>Uptime</th>
                            <th>Command</th>
                        </tr>
                    </thead>
                </table>
                {% if 'new' in buttons.shown %}
                <button type="button" class="btn btn-success" id="addNewDrone">
                    <i class="fa fa-plus-square"></i> Add new Drone
                </button>
                {% endif %}
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block page_scripts %}
<script type="text/javascript" class="init">
var drones_table;

/**
 * open the droneDetailsModal upon tap/click on an icon in the drones table
 */
function showDroneDetails(d) {
    var drone_row = d.getAttribute("data-drone_row");
    var thisDrone = drones_table.row(drone_row).data();

    url = site.uri.public + "/admin/geo-sense/forms/drones/details/" + thisDrone.id;

    /**
     * Fetch and render the form
     */
    $.ajax({
        type: "GET",
        url: url,
        cache: false
    })
    .fail(function(result) {
        /**
         * Display errors on failure
         */
        $('#userfrosting-alerts').flashAlerts().done(function() {
        });
    })
    .done(function(result) {
        /**
         * Append the form as a modal dialog to the body
         */
        $( "body" ).append(result);

        $('#details_drone_name:last-child', this).remove();
        $('#details_drone_name').html(thisDrone.name);
        $('#details_drone_serial').html(thisDrone.serial);
        $('#details_drone_local_ip').html(thisDrone.local_ip);
        $('#details_drone_software_version').html((thisDrone.software_version != null) ? thisDrone.software_version : 'n.a.');
        $('#details_drone_mac_address').html((thisDrone.mac_address != null) ? thisDrone.mac_address : 'n.a.');
        $('#details_drone_api_version').html((thisDrone.api_version != null) ? thisDrone.api_version : 'n.a.');
        $('#details_drone_revision_code').html((thisDrone.drone_revision_code != null) ? thisDrone.drone_revision_code.model : 'n.a.');

        /**
         * if drone is in active state we show latest activity timestamp
         */
        if (thisDrone.state === 1) {
            if (thisDrone.last_activity) {
                $('#details_drone_latest_activity').html(moment(thisDrone.last_activity.timestamp * 1000).format("D MMMM YYYY, HH:mm") + ' (' + moment.duration(moment().diff(thisDrone.last_activity.timestamp * 1000)).humanize() + ' ago)');
            } else {
                $('#details_drone_latest_activity').html('not available');
            }
        } else {
            $('#details_drone_latest_activity').html('n.a.');
        }

        $('#health_panel_heading_drone_name').html(thisDrone.name);

        $('#dialog-drone-details').modal('show');
    });
}

$(document).ready(function() {
    drones_table = $('#drones').DataTable({
        stateSave:  true,
        stateDuration: 60 * 60 * 24 * 31,
        responsive: true,
        scrollX:    true,
        language: {
            loadingRecords: '<br><br><h4>Loading...</h4>'
        },
        deferRender: true,
        ajax: {
            url: {% block drones_ajax_url %}'{{site.uri.public}}/geo-sense/api/drones'{% endblock %},
            dataSrc: function(json) {
                console.log(json);
                return json['rows'];
            }
        },
        columnDefs: [
            {
                orderable: false,
                targets: [0]
            }
        ],
        columns: [
            {data: 'id',
                sortable: false,
                render: function(data, type, full, meta) {
                    return '<i class="clickable fa fa-info-circle fa-fw fa-lg text-primary" data-drone_row="'
                         + meta.row + '" onclick="showDroneDetails(this);" data-toggle="tooltip" data-placement="top" title="show details and health"></i>'
                    {% if 'new' in buttons.shown %}
                         + '&nbsp;<i class="clickable fas fa-pencil-alt fa-fw fa-lg text-primary" data-drone_row="'
                         + meta.row + '" onclick="updateDrone(this);" data-toggle="tooltip" data-placement="top" title="edit drone"></i>'
                    {% endif %};
                }
            },
            {data: 'id'},
            {data: 'name'},
            {% if show_venue == true %}{data: 'zone.venue.name'},{% endif %}
            {data: 'local_ip'},
            {data: 'rssi_threshold'},
            {data: 'drone_revision_code',
                render: function(data, type, full, meta) {
                    if (data !== null && typeof data !== 'undefined') {
                        return data.model;
                    } else {
                        return '';
                    }
                }
            },
            {data: 'software_version'},
            {data: 'state',
                render: function(data, type, full, meta) {
                    if (data == 0)  {
                        return '<span class="label label-default">inactive</span>';
                    }

                    if (data == 1) {
                        return '<span class="label label-success">active</span>';
                    }

                    if (data == 2) {
                        return '<span class="label label-primary">calibrating</span>';
                    }
                }
            },
            {data: 'last_activity.timestamp',
                render: function(data, type, full, meta) {
                    if (full.state == 1) {
                        if (typeof data !== 'undefined') {
                            if (type === 'display') {
                                moment.locale('en');
                                var now = Math.round((new Date())/1000);
                                var delta_human = moment().to(moment.unix(data));

                                if (data > (now-300)) {
                                    full.capturing = 'online';
                                    return '<span class="label label-success" data-toggle="tooltip" data-placement="top" title="last probe request submitted ' + delta_human + '">online</span>';
                                }

                                if (data > (now-3600)) {
                                    full.capturing = 'quiet';
                                    return '<span class="label label-warning" data-toggle="tooltip" data-placement="top" title="last probe request submitted ' + delta_human + '">quiet</span>';
                                }

                                if (data < (now-3600)) {
                                    full.capturing = 'offline';
                                    return '<span class="label label-danger" data-toggle="tooltip" data-placement="top" title="last probe request submitted ' + delta_human + '">offline</span>';
                                }
                            }
                            if (type === "filter") {
                                var now = Math.round((new Date())/1000);
                                if (data > (now-300)) {
                                    return 'online';
                                }

                                if (data > (now-3600)) {
                                    return 'quiet';
                                }

                                if (data < (now-3600)) {
                                    return 'offline';
                                }
                            }
                            return data;
                        }

                        return '<span class="label label-warning" data-toggle="tooltip" data-placement="top" title="drone is configured as active but has not yet registered">offline</span>';
                    } else {
                        if (full.state == 2) {
                            return '';
                        } else {
                            return '';
                        }
                    }
                }
            },
            {data: 'last_health_message.wlan',
                render: function(data, type, full, meta) {
                    if (full.state == 0 || data == null || full.capturing == 'offline') {
                        return '<span class="label label-info">n/a</span>';
                    }

                    if (typeof data !== 'undefined') {
                        if (data == 0)  {
                            return '<span class="label label-danger">off</span>';
                        }

                        if (data == 1) {
                            return '<span class="label label-success">on</span>';
                        }
                    }
                }
            },
            {data: 'last_health_message.temp',
                render: function(data, type, full, meta) {
                    if (full.state == 1) {
                        if (typeof data !== 'undefined') {
                            if (type === 'display') {
                                var now = Math.round((new Date())/1000);
                                if (full.last_health_message.timestamp > (now - 540)) {
                                    var temperature = Math.round(data/100)/10;
                                    if (temperature > 65) {
                                        return '<span class="label label-danger">' + temperature + ' &#8451;</span>';
                                    } else {
                                        return '<span class="label label-success">' + temperature + ' &#8451;</span>';
                                    }
                                } else {
                                    return '<span class="label label-danger" data-toggle="tooltip" data-placement="top" title="missed a heart beat">missed heartbeat</span>';
                                }
                            }
                            return data;
                        }
                        return '<span class="label label-warning" data-toggle="tooltip" data-placement="top" title="drone is configured as active but has not yet registered">offline</span>';
                    } else {
                        return '';
                    }
                }
            },
            {data: 'last_health_message.uptime',
                render: function(data, type, full, meta) {
                    if (full.state == 1) {
                        if (typeof data !== 'undefined') {
                            if (type === 'display') {
                                var now = Math.round((new Date())/1000);
                                /**
                                 * if last health message was received shorter than 540 seconds ago (so just 4 minutes past the 5 minute interval) we show the uptime received
                                 * same value as used for the missed heartbeat message in the previous column
                                 */
                                if (full.last_health_message.timestamp > (now-540)) {
                                    /**
                                     * determine "real" uptime
                                     */
                                    var real_uptime = now - (full.last_health_message.timestamp - data);
                                    return moment.duration(real_uptime, "seconds").format("d[d] h[h] m[m]");;
                                } else {
                                    return '';
                                }
                            }
                            return data;
                        }
                        return 'unknown';
                    } else {
                        return '';
                    }
                }
            },
            {data: 'execute_command'}
        ],
    });

    /**
     * fix to get Bootstrap tooltips to work within Datatables (use the ID of the table container)
     * also add data-container: 'body' to the element triggering the tooltip to get it on top of other elements
     */
    $('#drones').on('draw.dt', function () {
        $('[data-toggle="tooltip"]').tooltip({ container: 'body' });
    });

    /**
     * open the Modal to create a new drone
     */
    {% if 'new' in buttons.shown %}
    $('#addNewDrone').click(function(e) {
        e.preventDefault();

        /**
         * show the modal
         */
        droneForm('dialog-drone-create', 'create');
    });
    {% endif %}

    setTimeout(refreshTimer1Minute, 60000);

    function refreshTimer1Minute() {
        /**
         * refresh the drones table content
         */
        console.log('refreshing table contents');
        drones_table.ajax.reload();
        setTimeout(refreshTimer1Minute, 60000);
    }
});

/**
 * open the Modal to update a drone
 */
function updateDrone(d) {
    var drone_row = d.getAttribute("data-drone_row");
    var thisDrone = drones_table.row(drone_row).data();

    /**
     * show the modal
     */
    droneForm('dialog-drone-update', 'update', thisDrone.id);
}

/**
 * Display a modal form for updating an existing venue or creating a new venue.
 * example call: venueForm('dialog-venue-edit', drone_id);
 */
function droneForm(box_id, type, drone_id) {
    drone_id = typeof drone_id !== 'undefined' ? drone_id : "";

    var data = {
        box_id: box_id
    };

    /**
     * Delete any existing instance of the form with the same name
     */
    if($('#' + box_id).length ) {
        $('#' + box_id).remove();
    }

    /**
     * also delete any existing instances of the confirmation modal if they exist
     */
    if($('#confirmModal').length ) {
        $('#confirmModal').remove();
    }

    var url;

    /**
     * If we are updating an existing venue
     */
    if (type == 'create') 
        url = site.uri.public + "/admin/geo-sense/forms/drones/create";
    else if (type == 'update') 
        url = site.uri.public + "/admin/geo-sense/forms/drones/update/" + drone_id;

    /**
     * Fetch and render the form
     */
    $.ajax({
      type: "GET",
      data: data,
      url: url,
      cache: false
    })
    .fail(function(result) {
        /**
         * Display errors on failure
         */
        $('#userfrosting-alerts').flashAlerts().done(function() {
        });
    })
    .done(function(result) {
        /**
         * Append the form as a modal dialog to the body
         */
        $( "body" ).append(result);
        $('#' + box_id).modal('show');

        $('#' + box_id + ' form').ufForm({
            validator: validators,
            msgTarget: $("#alerts-page")
        }).on("submitSuccess.ufForm", function() {
            /**
             * Reload the page on success and open venue info modal
             */
            window.location.reload();
        });
    });
}

</script>
{% endblock %}