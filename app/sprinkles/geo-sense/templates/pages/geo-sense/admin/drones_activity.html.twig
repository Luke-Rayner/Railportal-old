{% extends "pages/layouts/layout-dashboard.html.twig" %}

{% block page %}
    {% set page = page | merge({
        "title"       : "Drone activity history chart",
        "description" : ""
    }) %}
    {{ parent() }}
{% endblock %}

{% block content %}
<div class="page-head">
    <div class="page-title">
        <h1>{{page.title}}
            <small>{{page.description}}</small>
        </h1>
    </div>
</div>

<br>

<div class="row">
    <div class="col-lg-12 col-xs-12 col-sm-12">
        <div id="chart_container_1_1" class="portlet light bordered">
            <div class="portlet-title">
                <div class="caption ">
                    <span class="caption-subject font-blue-sharp bold">Probe requests stored per drone</span>
                    <span class="caption-helper">(5 min interval, all zones)</span>
                </div>
                <div class="tools">
                    <i class="fa fa-question-circle info-icon"></i>
                    <a href="" class="collapse"> </a>
                    <a href="" class="fullscreen"> </a>
                </div>
            </div>
            <div class="portlet-body">
                <div id="chart_1_1" style="width: 100%; height: 200px; margin: 0 auto"></div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-lg-12 col-xs-12 col-sm-12">
        <div id="chart_container_2_1" class="portlet light bordered">
            <div class="portlet-title">
                <div class="caption ">
                    <span class="caption-subject font-blue-sharp bold">Unique devices detected per drone</span>
                    <span class="caption-helper">(5 min interval, all zones)</span>
                </div>
                <div class="tools">
                    <i class="fa fa-question-circle info-icon"></i>
                    <a href="" class="collapse"> </a>
                    <a href="" class="fullscreen"> </a>
                </div>
            </div>
            <div class="portlet-body">
                <div id="chart_2_1" style="width: 100%; height: 200px; margin: 0 auto"></div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block page_scripts %}
<script type="text/javascript" class="init">

$(document).ready(function() {
    /**
     * Set the global timezone and locale for this session for use in moment.js
     */
    moment.tz.setDefault('{{current_user.primaryVenue.time_zone}}');
    moment.updateLocale('en', {
        week : {
            dow : 1,
        }
    });

    /**
     * calculate weekends for plotbands, going back 1 year
     * may be not very efficient but this works...
     */
    var seriesEnd = moment().startOf('day');
    var seriesStart = seriesEnd - (3600000*24*365);
    var weekends = weekendAreas(seriesStart, seriesEnd);

    ///////////////////////////////////////////////////////////////////////////
    // start preparations for line charts
    // the options for the first chart
    ///////////////////////////////////////////////////////////////////////////
    var chart_1_1_Options = {
        chart: {
            renderTo: 'chart_1_1',
            type: 'line',
            zoomType: 'x'
        },
        plotOptions: {
            series: {
                states: {
                    hover: {
                        enabled: true,
                        lineWidth: 2
                    }
                }
            }
        },
        xAxis: {
            type: 'datetime',
            events: {
                /**
                 * sync charts when zoom is triggered
                 */
                afterSetExtremes: function (event) {
                    var xMin = event.min;
                    var xMax = event.max;
                    var ex = chart_2.xAxis[0].getExtremes();
                    if (ex.min != xMin || ex.max != xMax) chart_2.xAxis[0].setExtremes(xMin, xMax, true, false);
                }
            },
            plotBands: weekends
        },
        tooltip: {
            shared: true,
            useHTML: true,
            formatter: function () {
                var tooltipcontent  = '<b>' + moment(this.x).format("HH:mm, D MMMM YYYY") + '</b>';
                    tooltipcontent += '<table style="width:100%">';

                /**
                 * we have to loop here as we don't yet know how many series we will have
                 */
                $.each(this.points, function () {
                    /**
                     * for nice formatting of the tooltip with the series markers included
                     */
                    var symbol;

                    switch (this.series.symbol) {
                        case 'circle':
                            symbol = '●';
                            break;
                        case 'diamond':
                            symbol = '♦';
                            break;
                        case 'square':
                            symbol = '■';
                            break;
                        case 'triangle':
                            symbol = '▲';
                            break;
                        case 'triangle-down':
                            symbol = '▼';
                            break;
                    }

                    tooltipcontent += '<tr><td><span style="color:' + this.point.color + '">' + symbol + '</span> ' + this.series.name + ':</td><td style="text-align: right;">' + this.y+ '</td></tr>';
                });

                tooltipcontent += '</table>';
                return tooltipcontent;
            }
        }
    };

    /**
     * initialize the first chart
     */
    var chart_1_1 = new Highcharts.Chart(chart_1_1_Options);
    chart_1_1.showLoading();

    ////////////////////////////////////
    // the options for the second chart
    ////////////////////////////////////
    var chart_2_1_Options = {
        chart: {
            renderTo: 'chart_2_1',
            type: 'line',
            zoomType: 'x'
        },
        plotOptions: {
            series: {
                states: {
                    hover: {
                        enabled: true,
                        lineWidth: 2
                    }
                }
            }
        },
        xAxis: {
            type: 'datetime',
            events: {
                /**
                 * sync charts when zoom is triggered
                 */
                afterSetExtremes: function (event) {
                    var xMin = event.min;
                    var xMax = event.max;
                    var ex = chart_1.xAxis[0].getExtremes();
                    if (ex.min != xMin || ex.max != xMax) chart_1.xAxis[0].setExtremes(xMin, xMax, true, false);
                }
            },
            plotBands: weekends
        },
        tooltip: {
            shared: true,
            useHTML: true,
            formatter: function () {
                var tooltipcontent  = '<b>' + moment(this.x).format("HH:mm, D MMMM YYYY") + '</b>';
                    tooltipcontent += '<table style="width:100%">';

                /**
                 * we have to loop here as we don't yet know how many series we will have
                 */
                $.each(this.points, function () {
                    /**
                     * for nice formatting of the tooltip with the series markers included
                     */
                    var symbol;

                    switch (this.series.symbol) {
                        case 'circle':
                            symbol = '●';
                            break;
                        case 'diamond':
                            symbol = '♦';
                            break;
                        case 'square':
                            symbol = '■';
                            break;
                        case 'triangle':
                            symbol = '▲';
                            break;
                        case 'triangle-down':
                            symbol = '▼';
                            break;
                    }

                    tooltipcontent += '<tr><td><span style="color:' + this.point.color + '">' + symbol + '</span> ' + this.series.name + ':</td><td style="text-align: right;">' + this.y+ '</td></tr>';
                });

                tooltipcontent += '</table>';
                return tooltipcontent;
            }
        }
    };

    /**
     * initialize the second chart
     */
    var chart_2_1 = new Highcharts.Chart(chart_2_1_Options);
    chart_2_1.showLoading();

    /**
     * define the bucketsize and timeframe for the charts here
     */
    var bucketsize = 300;
    var rangeStart = moment().subtract(24, 'hours');
    var rangeEnd   = moment();

    /**
     * get the data with ajax
     * url: "/api/stats/venue/drones_activity/:bucketsize/:rangeStart/:rangeEnd"
     * NOTE: all params in seconds/epoch time
     */
    $.ajax({
        url:      '{{site.uri.public}}/geo-sense/api/stats/venue/drones_activity/' + bucketsize + '/' + rangeStart + '/' + rangeEnd,
        type:     'GET',
        dataType: 'json',
        success:  onDataReceived
    });

    function onDataReceived(data) {
        /**
         * Load all the data for the charts
         */
        var dronesActivityStatsProbes =[];
        var dronesActivityStatsMacs =[];

        /**
         * here we process the data to get an array with objects like so:
         * {
         *     name: "some name",
         *     data: [[timestamp, y], [timestamp, y], [timestamp, y]]
         * }
         *
         * we start off with a single object with multiple key/value pairs
         * {
         *     "name1": [array with timestamp/y data pairs],
         *     "name2": [array with timestamp/y data pairs],
         * }
         */
        _.forOwn(data[0], function(value, key) {
            /**
             * here we also need to create null values for missing data points for "value" which is the array
             */
            dronesActivityStatsProbes.push({name: key, data: noGapsDataArray(_.sortBy(_.map(value, _.values),0), bucketsize)});
        });

        _.forOwn(data[1], function(value, key) {
            /**
             * here we also need to create null values for missing data points for "value" which is the array
             */
            dronesActivityStatsMacs.push({name: key, data: noGapsDataArray(_.sortBy(_.map(value, _.values),0), bucketsize)});
        });

        chart_1_1_Options.series = dronesActivityStatsProbes;
        chart_1_1 = new Highcharts.Chart(chart_1_1_Options);

        chart_2_1_Options.series = dronesActivityStatsMacs;
        chart_2_1 = new Highcharts.Chart(chart_2_1_Options);
    }
});

</script>
{% endblock %}