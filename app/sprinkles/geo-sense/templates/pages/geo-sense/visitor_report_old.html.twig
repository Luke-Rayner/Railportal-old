{% extends "pages/layouts/layout-dashboard.html.twig" %}

{% block page %}
    {% set page = page | merge({
        "title"       : "Visitor Report Old",
        "description" : "Visitor Report page"
    }) %}
    {{ parent() }}
{% endblock %}

{% block content %}
<div class="page-head">
    <div class="row text-center" style="display: none" id="pdf_title">
        <img src="{{site.uri.public}}/assets-raw/images/WiFi-Logo-Image-Blue.png" height="50px" width="50px" style="margin-top: 5px"/>
        <u><h1 class="bold">INTELLI-SENSE</h1></u>
    </div>

    <div class="page-title">
        <h1>{{page.title}}
            <small>{{page.description}}</small>
        </h1>
    </div>

    <div class="page-toolbar">
        <div id="dashboard-report-range" data-display-range="1" class="pull-right tooltips btn btn-fit-height blue-soft" data-placement="top" data-original-title="Select a time frame">
            <span class="visible-sm-inline visible-md-inline visible-lg-inline" id="page_daterange_selected"></span><span class="visible-xs-inline" id="page_daterange_selected_small"></span>&nbsp;
            <i class="icon-calendar"></i>&nbsp;
            <span class="thin uppercase hidden-xs"></span>&nbsp;
            <i class="fa fa-angle-down"></i>
        </div>
    </div>

    <button class="btn green-jungle pull-right" style="margin-right: 10px" id="csv_button" aria-hidden="true" data-toggle="tooltip" data-placement="bottom" title="Download report data in CSV format">Excel Export</button>
    <button class="btn orange pull-right" style="margin-right: 5px" aria-hidden="true" onclick="genPDF();" data-toggle="tooltip" data-placement="bottom" title="Print this page.">Print Report</button>
    <!-- <button class="btn btn-warning pull-right" id="tour_btn"style="margin-right: 5px" aria-hidden="true" data-toggle="tooltip" data-placement="bottom" title="Start Tour">Start Page Tour</button> -->
</div>

<br>

<div class="row">
    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
        <a id="donut_container_1" class="dashboard-stat dashboard-stat-v2 blue-soft" href="#">
            <div class="visual">
                <i class="fa fa-users"></i>
            </div>
            <div class="details">
                <div class="number bold">
                    <span id="donut_5"><i class="fa fa-circle-o-notch fa-spin" style="font-size: 70%;"></i></span>
                </div>
                <div class="desc"> Average visits, per year </div>
            </div>
        </a>
    </div>
    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
        <a id="donut_container_2" class="dashboard-stat dashboard-stat-v2 blue-soft" href="#">
            <div class="visual">
                <i class="fa fa-clock-o"></i>
            </div>
            <div class="details">
                <div class="number bold">
                    <span id="donut_6"><i class="fa fa-circle-o-notch fa-spin" style="font-size: 70%;"></i></span>
                </div>
                <div class="desc"> Average visits, per month </div>
            </div>
        </a>
    </div>
    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
        <a id="donut_container_3" class="dashboard-stat dashboard-stat-v2 blue-soft" href="#">
            <div class="visual">
                <i class="fa fa-cloud-download"></i>
            </div>
            <div class="details">
                <div class="number bold">
                    <span id="donut_7"><i class="fa fa-circle-o-notch fa-spin" style="font-size: 70%;"></i></span>
                </div>
                <div class="desc"> Average visits, per week </div>
            </div>
        </a>
    </div>
    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
        <a id="donut_container_4" class="dashboard-stat dashboard-stat-v2 blue-soft" href="#">
            <div class="visual">
                <i class="fa fa-users"></i>
            </div>
            <div class="details">
                <div class="number bold">
                    <span id="donut_8"><i class="fa fa-circle-o-notch fa-spin" style="font-size: 70%;"></i></span>
                    </div>
                <div class="desc"> Average visits, per day </div>
            </div>
        </a>
    </div>
</div>
<div class="row">
    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
        <a id="donut_container_5" class="dashboard-stat dashboard-stat-v2 yellow-gold" href="#">
            <div class="visual">
                <i class="fa fa-users"></i>
            </div>
            <div class="details">
                <div class="number bold">
                    <span id="donut_1"><i class="fa fa-circle-o-notch fa-spin" style="font-size: 70%;"></i></span>
                </div>
                <div class="desc"> Total visits this period </div>
            </div>
        </a>
    </div>
    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
        <a id="donut_container_6" class="dashboard-stat dashboard-stat-v2 yellow-gold" href="#">
            <div class="visual">
                <i class="fa fa-clock-o"></i>
            </div>
            <div class="details">
                <div class="number bold">
                    <span id="donut_2"><i class="fa fa-circle-o-notch fa-spin" style="font-size: 70%;"></i></span>
                </div>
                <div class="desc"> Busiest time of day </div>
            </div>
        </a>
    </div>
    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
        <a id="donut_container_7" class="dashboard-stat dashboard-stat-v2 yellow-gold" href="#">
            <div class="visual">
                <i class="fa fa-cloud-download"></i>
            </div>
            <div class="details">
                <div class="number bold">
                    <span id="donut_3"><i class="fa fa-circle-o-notch fa-spin" style="font-size: 70%;"></i></span>
                </div>
                <div class="desc"> Average dwell time </div>
            </div>
        </a>
    </div>
    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
        <a id="donut_container_8" class="dashboard-stat dashboard-stat-v2 yellow-gold" href="#">
            <div class="visual">
                <i class="fa fa-users"></i>
            </div>
            <div class="details">
                <div class="number bold">
                    <span id="donut_4"><i class="fa fa-circle-o-notch fa-spin" style="font-size: 70%;"></i></span>
                    </div>
                <div class="desc"> Average visits per day </div>
            </div>
        </a>
    </div>
</div>
<div class="clearfix"></div>

<div class="row" style="PAGE-BREAK-AFTER: always">
    <div class="col-lg-6 col-xs-12 col-sm-12">
        <div id="chart_container_1_1" class="portlet light bordered">
            <div class="portlet-title">
                <div class="caption ">
                    <span class="caption-subject font-blue-sharp bold">Busiest Zones</span>
                    <span class="caption-helper"></span>
                </div>
                <div class="tools">
                    <i class="fa fa-question-circle info-icon"></i>
                    <a href="" class="collapse"> </a>
                    <a href="" class="fullscreen"> </a>
                </div>
            </div>
            <div class="portlet-body">
                <div id="chart_2_1" style="width: 100%; height: 250px; margin: 0 auto"></div>
            </div>
        </div>
    </div>
    <div class="col-lg-6 col-xs-12 col-sm-12">
        <div id="chart_container_1_2" class="portlet light bordered">
            <div class="portlet-title">
                <div class="caption ">
                    <span class="caption-subject font-blue-sharp bold">Total Visitors - New Vs Repeat</span>
                    <span class="caption-helper"></span>
                </div>
                <div class="tools">
                    <i class="fa fa-question-circle info-icon"></i>
                    <a href="" class="collapse"> </a>
                    <a href="" class="fullscreen"> </a>
                </div>
            </div>
            <div class="portlet-body">
                <div id="chart_1_2" style="width: 100%; height: 250px; margin: 0 auto"></div>
            </div>
        </div>
    </div>
</div>

<!-- Hidden chart for the busiest zone csv chart -->
<div class="row hide">
    <div class="col-lg-12 col-xs-12 col-sm-12">
        <div class="portlet-body">
            <div id="chart_zones_hidden" style="width: 100%; height: 250px; margin: 0 auto"></div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-lg-6 col-xs-12 col-sm-12">
        <div id="chart_container_2_1" class="portlet light bordered">
            <div class="portlet-title">
                <div class="caption ">
                    <span class="caption-subject font-blue-sharp bold">Number of Visitors - New Vs Repeat</span>
                    <span class="caption-helper"></span>
                </div>
                <div class="tools">
                    <i class="fa fa-question-circle info-icon"></i>
                    <a href="" class="collapse"> </a>
                    <a href="" class="fullscreen"> </a>
                </div>
            </div>
            <div class="portlet-body">
                <div id="chart_3_2" style="width: 100%; height: 250px; margin: 0 auto"></div>
            </div>
        </div>
    </div>
    <div class="col-lg-6 col-xs-12 col-sm-12">
        <div id="chart_container_2_2" class="portlet light bordered">
            <div class="portlet-title">
                <div class="caption ">
                    <span class="caption-subject font-blue-sharp bold">Dwell time Analysis</span>
                    <span class="caption-helper"></span>
                </div>
                <div class="tools">
                    <i class="fa fa-question-circle info-icon"></i>
                    <a href="" class="collapse"> </a>
                    <a href="" class="fullscreen"> </a>
                </div>
            </div>
            <div class="portlet-body">
                <div id="chart_1_1" style="width: 100%; height: 250px; margin: 0 auto"></div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-lg-6 col-xs-12 col-sm-12">
        <div id="chart_container_3_1" class="portlet light bordered">
            <div class="portlet-title">
                <div class="caption ">
                    <span class="caption-subject font-blue-sharp bold"> Weather Data</span>
                    <span class="caption-helper">powered by <a href="https://darksky.net/poweredby/" target="new_window" style="color:white">dark sky</a></span>
                </div>
                <div class="tools">
                    <i class="fa fa-question-circle info-icon"></i>
                    <a href="" class="collapse"> </a>
                    <a href="" class="fullscreen"> </a>
                </div>
            </div>
            <div class="portlet-body">
                <div id="chart_3_1" style="width: 100%; height: 250px; margin: 0 auto"></div>
            </div>
        </div>
    </div>
    <div class="col-lg-6 col-xs-12 col-sm-12">
        <div id="chart_container_3_2" class="portlet light bordered">
            <div class="portlet-title">
                <div class="caption ">
                    <span class="caption-subject font-blue-sharp bold">Time of Day - Average</span>
                    <span class="caption-helper"></span>
                </div>
                <div class="tools">
                    <i class="fa fa-question-circle info-icon"></i>
                    <a href="" class="collapse"> </a>
                    <a href="" class="fullscreen"> </a>
                </div>
            </div>
            <div class="portlet-body">
                <div id="chart_2_2" style="width: 100%; height: 250px; margin: 0 auto"></div>
            </div>
        </div>
    </div>
</div>

<div class="row text-center" style="display: none" id="pdf_url">
    website address: <a>www.elephantwifi.co.uk</a>
</div>
{% endblock %}

{% block page_scripts %}
<script type="text/javascript" class="init">

function genPDF() {
    var pdf_title = document.getElementById("pdf_title");
    if (pdf_title.style.display === "none") {
        pdf_title.style.display = "block";
    }

    var pdf_url = document.getElementById("pdf_url");
    if (pdf_url.style.display === "none") {
        pdf_url.style.display = "block";
    }

    var element = document.getElementsByClassName("page-content")[0];
    var opt = {
        margin:       1,
        filename:     'visitor_report.pdf',
        image:        { type: 'jpeg', quality: 0.98 },
        html2canvas:  { scale: 1 },
        jsPDF:        { unit: 'pt', format: [1280, 720], orientation: 'l' }
    };

    html2pdf().set(opt).from(element).save();

    // Hide the element after 2 seconds allowing the screenshot to be taken while the element is shown
    window.setTimeout(hidePdfElements, 2000);
}

function hidePdfElements() {
    var pdf_title = document.getElementById("pdf_title");
    pdf_title.style.display = "none";

    var pdf_url = document.getElementById("pdf_url");
    pdf_url.style.display = "none";
}

/**
 * function to be executed when we want to print a page
 * (custom version for this page)
 */
var printUpdate = function () {
    /**
     * reflow all Highcharts instances
     */
    $('#chart_1_2').highcharts().reflow();
    $('#chart_2_1').highcharts().reflow();
    $('#chart_1_1').highcharts().reflow();
    $('#chart_3_1').highcharts().reflow();
    $('#chart_3_2').highcharts().reflow();
    $('#chart_2_2').highcharts().reflow();
};

/**
 * define this chart and it's weather icons globally for use in the callback functions
 */
var chart_3_1 = {};
var weather_icons_array = [];

/**
 * global var to prevent loops in charts syncing when zooming in/out
 * more examples here: http://jsfiddle.net/vgsp1duo/1/
 */
var rezoom_calling = 0;

/**
 * file name and report title for CSV download
 */
var csv_filename = 'Visitor_Report-' + moment().format("DD_MMMM_YYYY_HHmm") + '.csv';
var csv_title = '';
var venue_name = '{{user.venue_name}}';

/**
 * respond to click on the CSV download button
 */
$('#csv_button').on('click', function() {
    /**
     * initialise the arrays to append results to for download in CSV format
     */
    var csv_data = [];

    /**
     * update export title to reflect selected range
     */
    var csv_title = 'GEO-Sense: Visitor Report ({{user.venue_name}} - selected range: ' + $('#page_daterange_selected_large').text().replace(/,/g , '') + ')';

    /**
     * get the data from the charts
     */
    csv_data.push({
        heading: 'Overall metrics',
        process: true,
        data: [['DateTime', 'Average visitors per year', 'Average visitors per month', 'Average visitors per week', 'Average visitors per day', 'Total visitors this period', 'Busiest time of day', 'Average dwell time', 'Average visitors per day'],
               [
                    moment().format("DD MMMM YYYY HH:mm"),
                    $('#donut_5').text().replace(/,/g , ''),
                    $('#donut_6').text().replace(/,/g , ''),
                    $('#donut_7').text().replace(/,/g , ''),
                    $('#donut_8').text().replace(/,/g , ''),
                    $('#donut_1').text().replace(/,/g , ''),
                    $('#donut_2').text().replace(/,/g , ''),
                    $('#donut_3').text().replace(/,/g , ''),
                    $('#donut_4').text().replace(/,/g , ''),
               ]]
               // when process is true there must be at least two arrays (lines) of content: headers and data
    });

    csv_data.push({
        heading: 'Busiest Zones',
        process: false,
        data: $('#chart_zones_hidden').highcharts().getCSV() // when process is false we just push the output from Highcharts
    });

    csv_data.push({
        heading: 'Total Visitors - New Vs Repeat',
        process: false,
        data: $('#chart_1_2').highcharts().getCSV() // when process is false we just push the output from Highcharts
    });

    csv_data.push({
        heading: 'Number of Visitors - New Vs Repeat',
        process: false,
        data: $('#chart_3_2').highcharts().getCSV() // when process is false we just push the output from Highcharts
    });

    csv_data.push({
        heading: 'Dwell time analysis',
        process: false,
        data: $('#chart_1_1').highcharts().getCSV() // when process is false we just push the output from Highcharts
    });

    csv_data.push({
        heading: 'Weather data',
        process: false,
        data: $('#chart_3_1').highcharts().getCSV() // when process is false we just push the output from Highcharts
    });

    csv_data.push({
        heading: 'Time of Day - average',
        process: false,
        data: $('#chart_2_2').highcharts().getCSV() // when process is false we just push the output from Highcharts
    });

    exportToCsv(csv_filename, csv_title, venue_name, csv_data);
});

/**
 * define this chart and it's weather icons globally for use in the callback functions
 */
var chart_3_1 = {};
var weather_icons_array = [];

/**
 * global var to prevent loops in charts syncing when zooming in/out
 * more examples here: http://jsfiddle.net/vgsp1duo/1/
 */
var rezoom_calling = 0;

/**
 * function to generate shades of blue for the returning visitors breakdown
 */
var barColors = (function () {
    var colors = [],
        base = '#132149',
        i;

    for (i = 0; i < 7; i += 1) {
        // Start out with a darkened base color (negative brighten), and end
        // up with a much brighter color
        colors.push(Highcharts.Color(base).brighten(i / 8).get());
    }
    return colors;
}());

$(document).ready(function() {
    /**
     * Set the global timezone for this session for use in moment.js
     */
    moment.tz.setDefault('{{current_user.primaryVenue.time_zone}}');
    moment.updateLocale('en', {
        week : {
            dow : 1,
        }
    });

    /**
     * empty weekends array for plotbands
     */
    var weekends = [];

    /***************************************************************
     * start preparations for the individual charts from here
     ***************************************************************/

    /***************************************************************
     * start of dwell time analysis chart
     * container: chart_1_1
     * sync with: chart_2_1
     ***************************************************************/
    var chart_1_1_Options = dwell_time_analysis_options;
    chart_1_1_Options.chart.renderTo  = 'chart_1_1';
    chart_1_1_Options.xAxis.plotBands = weekends;
    chart_1_1_Options.chart.zoomType  = 'x';
    chart_1_1_Options.xAxis.events = {
        /**
         * sync charts when zoom is triggered
         */
        afterSetExtremes: function (event) {
            if (event.trigger == 'zoom' && rezoom_calling == 0) {
                rezoom_calling = '3_1';

                var xMin = event.min;
                var xMax = event.max;

                var chart_3_2 = $("#chart_3_2").highcharts();
                var ex = chart_3_2.xAxis[0].getExtremes();
                if (ex.min != xMin || ex.max != xMax) chart_3_2.xAxis[0].setExtremes(xMin, xMax, true, false);

                var chart_3_1 = $("#chart_3_1").highcharts();
                var ex = chart_3_1.xAxis[0].getExtremes();
                if (ex.min != xMin || ex.max != xMax) chart_3_1.xAxis[0].setExtremes(xMin, xMax, true, false);

                rezoom_calling = 0;
            }
        }
    };

    /**
     * initialize the chart
     */
    var chart_1_1 = new Highcharts.Chart(chart_1_1_Options);
    chart_1_1.showLoading();

    /**
     * callback to be called from the bundled ajax calls
     */
    function onChart_1_1_DataReceived(data) {
        /**
         * define the series received
         */
        var seriesoptions = [
            {
                type: 'line',
                name: 'average dwelltime',
                yAxis: 1,
                color: '#C6D4FC',
                dashStyle: 'LongDash'
            },
            {
                type: 'area',
                name: '{{current_user.primaryVenue.dt_level_5_label}}',
                color: '#949898'
            },
            {
                type: 'area',
                name: '{{current_user.primaryVenue.dt_level_4_label}}',
                color: '#5A5A5A'
            },
            {
                type: 'area',
                name: '{{current_user.primaryVenue.dt_level_3_label}}',
                color: '#6EB553'
            },
            {
                type: 'area',
                name: '{{current_user.primaryVenue.dt_level_2_label}}',
                color: '#4E5977'
            },
            {
                type: 'area',
                name: '{{current_user.primaryVenue.dt_level_1_label}}',
                color: '#E9825C'
            },
            {
                type: 'area',
                name: '{{current_user.primaryVenue.dt_skipped_label}}',
                visible: false,
                color: '#DD686E' // otherwise this becomes purple
            }
        ];

        /**
         * if our date range is longer than 2 days, we disable the markers for clean lines
         * if shorter we switch to a stacked column chart
         */
        if (data['dt_level_1'].length > 2) {
            chart_1_1_Options.plotOptions.series.marker.enabled = false;
        } else {
            chart_1_1_Options.plotOptions.series.marker.enabled = true;

            $.each(seriesoptions, function () {
                if (this.type == 'area') {
                    this.type = 'column';
                }
            });
        }

        chart_1_1_Options.series = seriesoptions;
        chart_1_1 = new Highcharts.Chart(chart_1_1_Options);
        chart_1_1.series[6].setData(noGapsDataArray(data['dt_skipped'], 86400));
        chart_1_1.series[5].setData(noGapsDataArray(data['dt_level_1'], 86400));
        chart_1_1.series[4].setData(noGapsDataArray(data['dt_level_2'], 86400));
        chart_1_1.series[3].setData(noGapsDataArray(data['dt_level_3'], 86400));
        chart_1_1.series[2].setData(noGapsDataArray(data['dt_level_4'], 86400));
        chart_1_1.series[1].setData(noGapsDataArray(data['dt_level_5'], 86400));
        chart_1_1.series[0].setData(noGapsDataArray(data['dt_average'], 86400));
        chart_1_1.xAxis[0].update({
            plotBands: weekends
        });
    }

    /***************************************************************
     * end of chart 1.1
     ***************************************************************/

    /***************************************************************
     * start of top zones chart and hidden zones chart
     * container: chart_2_1 | chart_zones_hidden
     ***************************************************************/
    var chart_2_1_Options = {
        chart: {
            renderTo: 'chart_2_1',
            backgroundColor: '#FFFFFF'
        },
        plotOptions: {
            column: {
                borderWidth: 0
            },
            series: {
                maxPointWidth: 40,
                stacking: 'normal'
            }
        },
        legend: {
            enabled: false
        },
        xAxis: {
            type: 'category'
        },
        tooltip: {
            shared: true,
            useHTML: true,
            borderWidth: 0,
            backgroundColor: "rgba(255,255,255,0)",
            shadow: false,
            formatter: function () {
                var mySum = 0;
                var tooltipcontent = '<b style="font-size: 12px;">' + this.points[0].key + '</b>';
                tooltipcontent += '<table style="width:100%; font-size: 12px;">';

                $.each(this.points, function () {
                    var symbol = '■';
                    tooltipcontent += '<tr><td><span style="color:' + this.point.color + '">' + symbol + '</span> ' + this.series.name + ':</td><td style="text-align: right;">' + this.y.toLocaleString() + '</td></tr>';
                    mySum += this.y;
                });

                tooltipcontent += '<tr><td><b>Total:</b></td><td style="text-align: right;"><b>' + mySum.toLocaleString() + '</b><td></tr>';
                tooltipcontent += '</table>';
                return tooltipcontent;
            }
        }
    };

    var chart_zones_hidden_Options = {
        chart: {
            renderTo: 'chart_zones_hidden',
            backgroundColor: '#FFFFFF'
        },
        plotOptions: {
            column: {
                borderWidth: 0
            },
            series: {
                maxPointWidth: 40,
                stacking: 'normal'
            }
        },
        legend: {
            enabled: false
        },
        xAxis: {
            type: 'category'
        }
    };

    /**
     * initialize the charts
     */
    var chart_2_1 = new Highcharts.Chart(chart_2_1_Options);
    chart_2_1.showLoading();

    /**
     * callback to be called from the bundled ajax calls
     */
    function chart_2_1_DataReceived(data) {
        /*
        sort the json results (zone with highest visitor count first)
        */
        data.sort(function(a, b){
            var x=a[1];
            var y=b[1];
            return y-x;
        });

        /**
         * only "take" top 10 from "data" to display in the chart
         */
        var top10 = _.take(data, 10);

        repeatVisitors = [],
        newVisitors = []

        for (var i = 0; i < top10.length; i++) {
            repeatVisitors.push([top10[i][0], top10[i][1]]);
            newVisitors.push([top10[i][0], top10[i][2]]);
        }

        /**
         * only show legend when we have a few zones to display
         */
        if (repeatVisitors.length < 6) {
            chart_2_1_Options.legend.enabled = true;
        }

        /**
         * Get the data to add to the hidden chart used for the csv download
         */
        csvRepeatVisitors = [],
        csvNewVisitors = []

        for (var i = 0; i < data.length; i++) {
            csvRepeatVisitors.push([data[i][0], data[i][1]]);
            csvNewVisitors.push([data[i][0], data[i][2]]);
        }

        var seriesoptions = [
            {
                type: 'bar', // default chart type
                states: {
                    hover: {
                        enabled: true
                    }
                },
                color: '#e25826',
                name: 'new visitors',
                stack: 'visitors'
            },
            {
                type: 'bar', // default chart type
                states: {
                    hover: {
                        enabled: true
                    }
                },
                color: '#132149',
                name: 'repeat visitors',
                stack: 'visitors'
            }
        ];
        chart_2_1_Options.series = seriesoptions;
        var chart_2_1 = new Highcharts.Chart(chart_2_1_Options);
        chart_2_1.series[1].setData(repeatVisitors);
        chart_2_1.series[0].setData(newVisitors);

        // chart_zones_hidden
        chart_zones_hidden_Options.series = seriesoptions;
        var chart_zones_hidden = new Highcharts.Chart(chart_zones_hidden_Options);
        chart_zones_hidden.series[1].setData(csvRepeatVisitors);
        chart_zones_hidden.series[0].setData(csvNewVisitors);
    }

    /**************************************************************
     * end of chart 2.1
     **************************************************************/

    /***************************************************************
     * start of timeOfDay average: chart 2.2
     * container: chart_2_2
     * url: {{site.uri.public}}/api/visitor_report/visitors_per_hourofday/
     ***************************************************************/
    var chart_2_2_Options = {
        chart: {
            renderTo: 'chart_2_2',
            backgroundColor: '#FFFFFF',
            type: 'area'
        },
        xAxis: {
            type: 'category'
        },
        tooltip: {
            shared: true,
            formatter: function () {
                var tooltipcontent = '<b style="font-size: 12px;">Between ' + this.x + ':00 and ' + (this.x+1) + ':00</b>';
                // we have to loop here as we don't yet know how many series we will have
                $.each(this.points, function () {
                    tooltipcontent += '<br/><p style="font-size: 12px;">' + this.series.name + ': ' + this.y.toLocaleString() + '</p>';
                });

                return tooltipcontent;
            }
        },
        legend: {
            enabled: true
        }
    };

    /**
     * initialize the timeOfDay average chart
     */
    var chart_2_2 = new Highcharts.Chart(chart_2_2_Options);
    chart_2_2.showLoading();

    /**
     * callback to be called from the bundled ajax calls
     */
    function chart_2_2_DataReceived(data) {
        /**
         * do something with the data
         */
        var seriesoptions = [
            {
                type: 'area',
                color: '#e25826', // e25826
                name: 'average visitors'
            }
        ];

        chart_2_2_Options.series = seriesoptions;
        chart_2_2 = new Highcharts.Chart(chart_2_2_Options);
        chart_2_2.series[0].setData(data);

        /*
        here we also get the busiest hour and send that to donut 4
        */
        var hours = _.sortBy(data, function(value, key) {
            return value[1];
        });

        if (hours.length > 0) {
            $('#donut_2').html((_.last(hours)[0]) + ':00 - ' + (_.last(hours)[0] + 1) + ':00');
        } else {
            $('#donut_2').html('<span style="font-size: 60%;">no data</span>');
        }
    }

    /***************************************************************
     * end of chart 2.2
     ***************************************************************/

    /***************************************************************
     * start of weather stats chart
     * container: chart_3_1
     ***************************************************************/
    var chart_3_1_Options = {
        chart: {
            renderTo: 'chart_3_1',
            backgroundColor: '#FFFFFF',
            zoomType: 'x',
            events: {
                redraw: function(event) {
                    redrawWeatherIcons(event);
                }
            }
        },
        xAxis: {
            type: 'datetime',
            plotBands: weekends,
            events: {
                /**
                 * sync charts when zoom is triggered
                 */
                afterSetExtremes: function (event) {
                    if (event.trigger == 'zoom' && rezoom_calling == 0) {
                        rezoom_calling = '3_1';

                        var xMin = event.min;
                        var xMax = event.max;

                        var chart_3_2 = $("#chart_3_2").highcharts();
                        var ex = chart_3_2.xAxis[0].getExtremes();
                        if (ex.min != xMin || ex.max != xMax) chart_3_2.xAxis[0].setExtremes(xMin, xMax, true, false);

                        var chart_1_1 = $("#chart_1_1").highcharts();
                        var ex = chart_1_1.xAxis[0].getExtremes();
                        if (ex.min != xMin || ex.max != xMax) chart_1_1.xAxis[0].setExtremes(xMin, xMax, true, false);

                        rezoom_calling = 0;
                    }
                }
            }
        },
        yAxis: [
            {
                floor: null,
                minPadding: 0.1,
                maxPadding: 0.2,
                labels: {
                    format: '{value}°'
                }
            },
            {
                floor: null,
                labels: {
                    format: '{value} mm'
                },
                opposite: true
            }
        ],
        tooltip: {
            shared: true,
            useHTML: true,
            borderWidth: 0,
            backgroundColor: "rgba(255,255,255,0)",
            shadow: false,
            formatter: function () {
                var symbol = '■';
                var tooltipcontent = '<b style="font-size: 12px;">' + moment(this.x).format("dddd, D MMMM YYYY") + '</b>';
                if (this.points[1] && this.points[2] && this.points[0]) {
                    tooltipcontent += '<table style="width:100%; font-size: 12px;">';
                    tooltipcontent += '<tr><td><span style="color:' + this.points[1].point.color + '">' + symbol + '</span> ';
                    tooltipcontent += this.points[1].series.name + ':</td><td style="text-align: right;">' + this.points[1].point.y.toFixed(1).toLocaleString() + ' °C</td></tr>';
                    tooltipcontent += '<tr><td><span style="color:' + this.points[2].point.color + '">' + symbol + '</span> ';
                    tooltipcontent += this.points[2].series.name + ':</td><td style="text-align: right;">' + this.points[2].point.y.toFixed(1).toLocaleString() + ' °C</td></tr>';
                    tooltipcontent += '<tr><td><span style="color:' + this.points[0].point.color + '">' + symbol + '</span> ';
                    tooltipcontent += this.points[0].series.name + ':</td><td style="text-align: right;">' + this.points[0].point.y.toFixed(1).toLocaleString() + ' mm</td></tr>';
                    tooltipcontent += '</table>';
                    tooltipcontent += '<br/><span style="display:block; width:200px; white-space:normal;"><i>' + this.points[1].point.summary + '</i></span>';
                }

                return tooltipcontent;
            }
        },
        plotOptions: {
            column: {
                borderWidth: 0//,
                //pointPlacement: 'between'
            },
            line: {
                pointPlacement: 'between'
            },
            series: {
                marker: {
                    enabled: false,
                    symbol: 'circle',
                    radius: 2,
                    states: {
                        hover: {
                            enabled: true
                        }
                    }
                }
            }
        },
        legend: {
            enabled: true
        }
    };

    /**
     * initialize the chart
     */
    chart_3_1 = new Highcharts.Chart(chart_3_1_Options);
    chart_3_1.showLoading();

    /**
     * callback to be called from the bundled ajax calls
     */
    function onChart_3_1_DataReceived(data) {
        /**
         * define the series and their options
         */
        var seriesoptions = [
            {
                type: 'column',
                //pointWidth: 100,
                states: {
                    hover: {
                        enabled: false
                    }
                },
                color: '#C6D4FC',
                name: 'precipitation',
                pointRange: 24 * 3600 * 1000,
                connectNulls: false,
                yAxis: 1
            },
            {
                type: 'spline',
                lineWidth: 2,
                states: {
                    hover: {
                        enabled: true,
                        lineWidth: 2
                    }
                },
                color: '#DD686E',
                name: 'max temperature',
                pointRange: 24 * 3600 * 1000,
                connectNulls: false
            },
            {
                type: 'spline',
                lineWidth: 2,
                states: {
                    hover: {
                        enabled: true,
                        lineWidth: 2
                    }
                },
                color: '#132149',
                name: 'min temperature',
                pointRange: 24 * 3600 * 1000,
                connectNulls: false
            }
        ];

        chart_3_1_Options.series = seriesoptions;
        chart_3_1 = new Highcharts.Chart(chart_3_1_Options);
        chart_3_1.series[0].setData(noGapsDataArray(data.precipitation, 24*60*60));
        chart_3_1.series[2].setData(noGapsDataArray(data.temp_min, 24*60*60));
        chart_3_1.series[1].setData(noGapsDataArray(data.temp_max, 24*60*60));
        chart_3_1.xAxis[0].update({
            plotBands: weekends
        });
    }

    /**
     * we need to redraw the weather icons when the chart gets redrawn/resized
     */
    function redrawWeatherIcons(event) {
        /**
         * destroy all weather icons that exist inside the chart area before we draw new ones, then empty the array
         */
        _.forEach(weather_icons_array, function(point) {
            if (point) {
                point.destroy();
            }
        });

        weather_icons_array = [];

        /**
         * cycle through the data points to draw icons for those within the chart
         * first count the number of points that are actually in the visible part of the chart
         */
        var points_count_in_chart = _.countBy(event.target.series[1].points, function(point) {
            return point.isInside;
        });

        if (points_count_in_chart.true < 40) {
            /**
             * only process points that are inside the new chart area and only draw icon where we have less than
             * 40 data points. Otherwise the chart would become too crowded
             */
            _.forEach(event.target.series[1].points, function(point) {
                var file_name = '';

                if (point.isInside) {
                    /**
                     * here we translate the provided icon attribute to the actual file name we want to render
                     */
                    switch(point.icon) {
                        case 'clear-day':
                            file_name = 'f00d(59)_32';
                            break;
                        case 'night-clear':
                            file_name = 'f02e(12)_32';
                            break;
                        case 'rain':
                            file_name = 'f019(41)_32';
                            break;
                        case 'snow':
                            file_name = 'f01b(57)_32';
                            break;
                        case 'sleet':
                            file_name = 'f017(58)_32';
                            break;
                        case 'strong-wind':
                            file_name = 'f050(0)_32';
                            break;
                        case 'fog':
                            file_name = 'f021(29)_32';
                            break;
                        case 'cloudy':
                            file_name = 'f013(36)_32';
                            break;
                        case 'partly-cloudy-day':
                            file_name = 'f002(53)_32';
                            break;
                        case 'partly-cloudy-night':
                            file_name = 'f031(15)_32';
                            break;
                        case 'hail':
                            file_name = 'f015(38)_32';
                            break;
                        case 'thunderstorm':
                            file_name = 'f01e(30)_32';
                            break;
                        case 'tornado':
                            file_name = 'f056(1)_32';
                            break;
                        case 'wind':
                            file_name = 'f085(2)_32';
                            break;
                        default:
                            file_name = 'f00d(59)_32';
                    }

                    /**
                     * render the icon relative to the max temp point it is attached to
                     * first construct the icon, then render it to the canvas
                     *
                     * NOTE:
                     * we add the icon object to an array for later use (e.g. to remove the icons upon redraw of the chart)
                     */
                    weather_icons_array[point.index] = chart_3_1.renderer.image(
                        '{{site.uri.public}}/images/weather_icons_32x32/' + file_name + '.png',
                        point.plotX+20,
                        point.plotY-25,
                        30,
                        30
                    ).attr({
                        zIndex: 5
                    });

                    weather_icons_array[point.index].add();
                }
            });
        }
    }

    /***************************************************************
     * end of chart 3.1
     ***************************************************************/

    /***************************************************************
     * start of visitor stats chart
     * container: chart_3_2
     ***************************************************************/
    var chart_3_2_Options = {
        chart: {
            renderTo: 'chart_3_2',
            backgroundColor: '#FFFFFF',
            zoomType: 'x'
        },
        xAxis: {
            type: 'datetime',
            plotBands: weekends,
            events: {
                /**
                 * sync charts when zoom is triggered
                 */
                afterSetExtremes: function (event) {
                    if (event.trigger == 'zoom' && rezoom_calling == 0) {
                        rezoom_calling = '3_2';

                        var xMin = event.min;
                        var xMax = event.max;

                        var chart_3_1 = $("#chart_3_1").highcharts();
                        var ex = chart_3_1.xAxis[0].getExtremes();
                        if (ex.min != xMin || ex.max != xMax) chart_3_1.xAxis[0].setExtremes(xMin, xMax, true, false);

                        var chart_1_1 = $("#chart_1_1").highcharts();
                        var ex = chart_1_1.xAxis[0].getExtremes();
                        if (ex.min != xMin || ex.max != xMax) chart_1_1.xAxis[0].setExtremes(xMin, xMax, true, false);

                        rezoom_calling = 0;
                    }
                }
            }
        },
        tooltip: {
            shared: true,
            useHTML: true,
            borderWidth: 0,
            backgroundColor: "rgba(255,255,255,0)",
            shadow: false,
            formatter: function () {
                var tooltipcontent = '<b style="font-size: 12px;">' + moment(this.x).format("dddd, D MMMM YYYY") + '</b>';
                var mySum = 0;
                tooltipcontent += '<table style="width:100%; font-size: 12px;">';

                /**
                 * we have to loop here as we don't yet know how many series we will have
                 */
                $.each(this.points, function () {
                    var symbol = '■';
                    tooltipcontent += '<tr><td><span style="color:' + this.point.color + '">' + symbol + '</span> ' + this.series.name + ':</td><td style="text-align: right;">' + this.y.toLocaleString() + '</td></tr>';
                    mySum += this.y;
                });

                tooltipcontent += '<tr><td><b>Total:</b></td><td style="text-align: right;"><b style="font-size: 12px;">' + mySum.toLocaleString() + '</b><td></tr>';
                tooltipcontent += '</table>';
                return tooltipcontent;
            }
        },
        plotOptions: {
            column: {
                borderWidth: 0,
                stacking: 'normal'
            }
        },
        legend: {
            enabled: true
        }
    };

    /*
    initialize the chart
    */
    var chart_3_2 = new Highcharts.Chart(chart_3_2_Options);
    chart_3_2.showLoading();

    /*
    callback to be called from the bundled ajax calls
    */
    function onChart_3_2_DataReceived(data) {
        console.log(data);
        /*
        do something with the data
        */
        var seriesoptions = [
            {
                type: 'column', // default chart type
                lineWidth: 2,
                states: {
                    hover: {
                        enabled: true,
                        lineWidth: 2
                    }
                },
                color: '#e25826',
                name: 'new visitors',
                stack: 'visitors'
            },
            {
                type: 'column', // default chart type
                lineWidth: 2,
                states: {
                    hover: {
                        enabled: true,
                        lineWidth: 2
                    }
                },
                color: '#132149',
                name: 'repeat visitors',
                stack: 'visitors'
            }
        ];

        /*
        when date range is longer than 6 weeks we switch to area chart instead of column
        */
        if (typeof data.new !== 'undefined' && data.new.length > 6*7) {
            seriesoptions[0].type = 'area';
            seriesoptions[1].type = 'area';
        }

        chart_3_2_Options.series = seriesoptions;
        var chart_3_2 = new Highcharts.Chart(chart_3_2_Options);
        chart_3_2.series[0].setData(noGapsDataArray(data.new, 86400));
        chart_3_2.series[1].setData(noGapsDataArray(data.repeat, 86400));
        chart_3_2.xAxis[0].update({
            plotBands: weekends
        });

        /*
        NOTE: with this function we also feed the "total visitors" data to chart 1.2
        */
        var totalnew    = 0;
        var totalrepeat = 0;

        if (typeof data.new !== 'undefined') {
            _.forEach(data.new, function(value) {
                totalnew += value[1];
            });

            _.forEach(data.repeat, function(value) {
                totalrepeat += value[1];
            });
        }

        /**
         * define font size percentage for the donut contents, reduce size if total is over 1M
         */
        var chart_1_2__font_size_perc = 150;
        if (totalnew + totalrepeat >= 1000000) {
            var chart_1_2__font_size_perc = 120;
        }

        chart_1_2_Options.title.text = '<b style="font-size: ' + chart_1_2__font_size_perc + '%; font-weight: bold;">' + (totalnew + totalrepeat).toLocaleString() + '</b><br><b>Total</b>';
        var chart_1_2 = new Highcharts.Chart(chart_1_2_Options);
        chart_1_2.series[0].setData([totalnew, totalrepeat]);

        /**
         * NOTE: with this function we also feed donut_1
         */
        $('#donut_1').html((totalnew + totalrepeat).toLocaleString());


        /**
         * NOTE: with this function we also feed the "average visitors" data to donut 4
         */
        var total_visitors = totalnew + totalrepeat;
        var counter = data.new.length;

        if (counter > 1) {
            var average = Math.floor(total_visitors/counter);
        } else {
            var average = total_visitors;
        }

        $('#donut_4').html(average.toLocaleString());
    }

    /***************************************************************
     * end of chart 3.2
     ***************************************************************/

    /***************************************************************
     * top row donut charts from here
     ***************************************************************/

    /*
    here we get the metrics (average visitors for multiple time units) for the top row donuts with ajax
    - start off with the ajax function to get average visitor metrics
    */
    $.ajax({
        url:        '{{site.uri.public}}/geo-sense/api/visitor_report/alltime_averages',
        type:       'GET',
        dataType:   'json',
        success:    onAvgVisitorMetricsReceived
    });

    /*
    then push the received average visitor metrics to the top row donuts
    */
    function onAvgVisitorMetricsReceived(data) {
        $('#donut_5').html(data.average_yearly.toLocaleString());
        $('#donut_6').html(data.average_monthly.toLocaleString());
        $('#donut_7').html(data.average_weekly.toLocaleString());
        $('#donut_8').html(data.average_daily.toLocaleString());
    }

    /*
    push the received dwelltime data for a range not starting today to the page
    */
    function onDonut_3_DataReceived(data) {
        // Load all the data into the DOM
        $('#donut_3').html(data + ' <span style="font-size: 60%;">minutes</span>');
    }

    /*
    end of top row donut charts
    ***************************************************************/

    /***************************************************************
    start of new/repeat chart
    container: chart_1_2
    */

    /*
    define specific options then draw "chart 1.2" to
    container: chart_1_2
    */
    var chart_1_2_Options = {
        chart: {
            type: 'pie',
            renderTo: 'chart_1_2',
            backgroundColor: '#FFFFFF',
            plotBorderWidth: null,
            plotShadow: false,
            spacingTop: 0,
            spacingBottom: 0,
            spacingLeft: 0,
            spacingRight: 0
        },
        plotOptions: {
            pie: {
                innerSize: '65%',
                center: ['50%', '50%'],
                borderWidth: 0,
                allowPointSelect: false,
                cursor: false,
                showInLegend: true,
                point: {
                    events: {
                        legendItemClick: function () {
                            return false;
                        }
                    }
                }
            },
            series: {
                states: {
                    hover: {
                        enabled: false
                    }
                }
            }
        },
        legend: {
            align: 'right',
            verticalAlign: 'top',
            layout: 'vertical',
            floating: true
        },
        tooltip: {
            formatter: function () {
                var tooltipcontent = '<b style="font-size: 12px;">' + this.key + '</b><br><p style="font-size: 12px;">' + (Math.round(this.percentage*10))/10 + '% (' + this.y.toLocaleString() + ' of ' + this.total.toLocaleString() + ')</p>';
                return tooltipcontent;
            }
        },
        title: {
            align: 'center',
            verticalAlign: 'middle',
            y: 10
        }
    };

    chart_1_2_Options.series = [{
        name: "visitors",
        data: [{
            name: "new visitors",
            y: 0,
            color: '#e25826'
        },
        {
            name: "repeat visitors",
            y: 0,
            color: '#132149'
        }]
    }];

    var chart_1_2 = new Highcharts.Chart(chart_1_2_Options);
    chart_1_2.showLoading();

    /*
    end of chart 1.2
    ***************************************************************/

    /***************************************************************
    * daterangepicker and ajax loading of all the data from here
    ****************************************************************/
    /**
     * define default start and end for the page
     */
    var rangeStart  = moment().subtract(7, "days").startOf('day');
    var rangeEnd    = moment().startOf('day');
    
    /**
     * initiate the daterangepicker with initial start/end and Label
     */
    page_daterange(rangeStart, rangeEnd);

    /*
    functions to display the "active" custom date range and the picker for current page
    */
    $('#dashboard-report-range').daterangepicker({
        timePicker:             true,
        timePicker24Hour:       true,
        timePickerIncrement:    15,
        showISOWeekNumbers:     true,
        locale: {
            format: "DD/MM/YYYY",
            firstDay: 1
        },
        ranges: {
           'Yesterday': [moment().startOf('day').subtract(1, 'days'), moment().startOf('day')],
           'Past 7 days': [rangeStart, rangeEnd], //default value for the page
           'Last Week': [moment().subtract(1, 'weeks').startOf('week'), moment().startOf('week')],
           'Month to-date': [moment().startOf('month'), moment().startOf('day')],
           'Last Month': [moment().subtract(1, 'months').startOf('month').startOf('day'), moment().startOf('month').startOf('day')],
           'All Time': ['{{current_user.primaryVenue.venue_tracking.capture_start | date("d/m/Y", "Europe/London")}}', moment()]
        },
        startDate:  rangeStart,
        endDate:    rangeEnd,
        minDate:    '{{current_user.primaryVenue.venue_tracking.capture_start | date("d/m/Y", "Europe/London")}}',
        maxDate:    moment(),
        opens:      'left'
    }, page_daterange);

    /**
     * callback function to execute upon selected date range
     */
    function page_daterange(start, end) {
        /**
         * place the selected range in the <span> at the top of the page
         */
        $('#page_daterange_selected').html(start.format('dddd, D MMMM YYYY') + ' - ' + end.format('dddd, D MMMM YYYY'));
        $('#page_daterange_selected_small').html(start.format('D MMM YYYY') + ' - ' + end.format('D MMM YYYY'));

        if (end.diff(start) === 0) {
            console.log('we have difference between start and end of zero: we will add 1 hour to end');
            end.add(1, 'hour');
        }

        console.log(start + ':' + end);

        /**
         * update the weekend plotbands
         */
        weekends = weekendAreasDaily(start, end);

        /**
         * then we need to set the charts, <div>s and <spans>s which will be refreshed, to their loading state
         */
        var chart_1_1 = $("#chart_1_1").highcharts();
        var chart_1_2 = $("#chart_1_2").highcharts();
        var chart_2_1 = $("#chart_2_1").highcharts();
        var chart_2_2 = $("#chart_2_2").highcharts();
        var chart_3_1 = $("#chart_3_1").highcharts();
        var chart_3_2 = $("#chart_3_2").highcharts();

        chart_1_1.showLoading();
        chart_1_2.showLoading();
        chart_2_1.showLoading();
        chart_2_2.showLoading();
        chart_3_1.showLoading();
        chart_3_2.showLoading();

        $('#donut_1').html('<i class="fa fa-spinner fa-spin"></i>');
        $('#donut_2').html('<i class="fa fa-spinner fa-spin"></i>');
        $('#donut_3').html('<i class="fa fa-spinner fa-spin"></i>');
        $('#donut_4').html('<i class="fa fa-spinner fa-spin"></i>');

        /**
         * from here we call all ajax sources with the newly selected start/end:
         */

        /**
         * get the data for chart 3.2, chart 1.2, donut_1
         */
        $.ajax({
            url:        '{{site.uri.public}}/geo-sense/api/visitor_report/new_vs_repeat/old/' + start + '/' + end,
            type:       'GET',
            dataType:   'json',
            success:    onChart_3_2_DataReceived
        });

        /**
         * get the data for chart 2.2, donut_2
         */
        $.ajax({
            url:        '{{site.uri.public}}/geo-sense/api/visitor_report/visitors_per_hourofday/old/' + start + '/' + end ,
            type:       'GET',
            dataType:   'json',
            success:    chart_2_2_DataReceived
        });

        /**
         * get the data for chart 3.1
         */
        $.ajax({
            url:        '{{site.uri.public}}/geo-sense/api/visitor_report/weather_daily/' + start + '/' + end,
            type:       'GET',
            dataType:   'json',
            success:    onChart_3_1_DataReceived
        });

        /**
         * get the data for chart 2.1
         */
        $.ajax({
            url:        '{{site.uri.public}}/geo-sense/api/visitor_report/busiest_zones/old/' + start + '/' + end,
            type:       'GET',
            dataType:   'json',
            success:    chart_2_1_DataReceived
        });

        /**
         * get the average dwell time for donut_3
         */
        $.ajax({
            url:        '{{site.uri.public}}/geo-sense/api/stats/average_dwelltime/' + start + "/" + end,
            type:       'GET',
            dataType:   'json',
            success:    onDonut_3_DataReceived
        });

        /**
         * get the data for chart 1.1, donut_4
         */
        $.ajax({
            url:        '{{site.uri.public}}/geo-sense/api/stats/venue/visitors_durations/' + start + '/' + end,
            type:       'GET',
            dataType:   'json',
            success:    onChart_1_1_DataReceived
        });
    }

    /***************************************************************
     * end of daterangepicker and ajax data loading
     ***************************************************************/
});
</script>
{% endblock %}