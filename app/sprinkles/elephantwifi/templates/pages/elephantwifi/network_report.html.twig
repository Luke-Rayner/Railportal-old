{% extends "pages/layouts/layout-dashboard.html.twig" %}

{% block page %}
    {% set page = page | merge({
        "title"       : "Network Report",
        "description" : "Network Report page"
    }) %}
    {{ parent() }}
{% endblock %}

{% block content %}
<div class="page-head">
    <div class="row text-center" style="display: none" id="pdf_title">
        <img src="{{site.uri.public}}/images/WiFi-Logo-Image-Blue.png" height="50px" width="50px" style="margin-top: 5px"/>
        <u><h1 class="bold">INTELLI-SENSE</h1></u>
    </div>

    <div class="page-title">
        <h1>{{page.title}}
            <small>{{page.description}}</small>
        </h1>
    </div>

    <div class="page-toolbar">
        <div id="dashboard-report-range" data-display-range="1" class="pull-right tooltips btn btn-fit-height blue-soft" data-placement="top" data-original-title="Select a time frame">
            <span class="visible-sm-inline visible-md-inline visible-lg-inline" id="page_daterange_selected"></span><span class="visible-xs-inline" id="page_daterange_selected_small"></span>&nbsp;
            <i class="icon-calendar"></i>&nbsp;
            <span class="thin uppercase hidden-xs"></span>&nbsp;
            <i class="fa fa-angle-down"></i>
        </div>
    </div>

    <button class="btn green-jungle pull-right" style="margin-right: 10px" id="csv_button" aria-hidden="true" data-toggle="tooltip" data-placement="bottom" title="Download report data in CSV format">Excel Export</button>
    <button class="btn orange pull-right" style="margin-right: 5px" aria-hidden="true" onclick="genPDF();" data-toggle="tooltip" data-placement="bottom" title="Print this page.">Print Report</button>
    <!-- <button class="btn btn-warning pull-right" id="tour_btn"style="margin-right: 5px" aria-hidden="true" data-toggle="tooltip" data-placement="bottom" title="Start Tour">Start Page Tour</button> -->
</div>

<br>

<div class="row">
    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
        <a id="donut_container_1" class="dashboard-stat dashboard-stat-v2 blue-soft" href="#">
            <div class="visual">
                <i class="fa fa-users"></i>
            </div>
            <div class="details">
                <div class="number">
                    <span id="span_most_popular_browser" data-toggle="tooltip" data-placement="top" title="All-time average visitors per year. Includes all zones."><i class="fa fa-circle-o-notch fa-spin" style="font-size: 70%;"></i></span>
                </div>
                <div class="desc"> Most popular browser </div>
            </div>
        </a>
    </div>
    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
        <a id="donut_container_2" class="dashboard-stat dashboard-stat-v2 blue-soft" href="#">
            <div class="visual">
                <i class="fa fa-clock-o"></i>
            </div>
            <div class="details">
                <div class="number">
                    <span id="span_most_popular_os" data-toggle="tooltip" data-placement="top" title="All-time average visitors per month. Includes all zones."><i class="fa fa-circle-o-notch fa-spin" style="font-size: 70%;"></i></span>
                </div>
                <div class="desc"> Most popular operating system </div>
            </div>
        </a>
    </div>
    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
        <a id="donut_container_3" class="dashboard-stat dashboard-stat-v2 blue-soft" href="#">
            <div class="visual">
                <i class="fa fa-cloud-download"></i>
            </div>
            <div class="details">
                <div class="number">
                    <span id="span_total_downloads" data-toggle="tooltip" data-placement="top" title="All-time average visitors per week. Includes all zones."><i class="fa fa-circle-o-notch fa-spin" style="font-size: 70%;"></i></span>
                </div>
                <div class="desc"> Download Traffic </div>
            </div>
        </a>
    </div>
    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
        <a id="donut_container_4" class="dashboard-stat dashboard-stat-v2 blue-soft" href="#">
            <div class="visual">
                <i class="fa fa-users"></i>
            </div>
            <div class="details">
                <div class="number">
                    <span id="span_average_daily_roaming_dwell" data-toggle="tooltip" data-placement="top" title="All-time average visitors per day. Includes all zones."><i class="fa fa-circle-o-notch fa-spin" style="font-size: 70%;"></i></span>
                    </div>
                <div class="desc"> Avg daily roaming dwell </div>
            </div>
        </a>
    </div>
</div>
<div class="clearfix"></div>

<div class="row">
    <div class="col-lg-6 col-xs-12 col-sm-12">
        <div id="chart_container_1_1" class="portlet light bordered">
            <div class="portlet-title">
                <div class="caption ">
                    <span class="caption-subject font-blue-sharp bold">Top 10 Operating Systems</span>
                    <span class="caption-helper"></span>
                </div>
                <div class="tools">
                    <i class="fas fa-question-circle info-icon"></i>
                    <a href="" class="collapse"> </a>
                    <a href="" class="fullscreen"> </a>
                </div>
            </div>
            <div class="portlet-body">
                <div id="chart_1_1" style="width: 100%; height: 200px; margin: 0 auto"></div>
            </div>
        </div>
    </div>
    <div class="col-lg-6 col-xs-12 col-sm-12">
        <div id="chart_container_1_2" class="portlet light bordered">
            <div class="portlet-title">
                <div class="caption ">
                    <span class="caption-subject font-blue-sharp bold">Top 10 Browsers</span>
                    <span class="caption-helper"></span>
                </div>
                <div class="tools">
                    <i class="fas fa-question-circle info-icon"></i>
                    <a href="" class="collapse"> </a>
                    <a href="" class="fullscreen"> </a>
                </div>
            </div>
            <div class="portlet-body">
                <div id="chart_1_2" style="width: 100%; height: 200px; margin: 0 auto"></div>
            </div>
        </div>
    </div>
</div>

<div class="row" style="PAGE-BREAK-AFTER: always">
    <div class="col-lg-6 col-xs-12 col-sm-12">
        <div id="chart_container_2_1" class="portlet light bordered">
            <div class="portlet-title">
                <div class="caption ">
                    <span class="caption-subject font-blue-sharp bold">Top 10 Manufacturers</span>
                    <span class="caption-helper"></span>
                </div>
                <div class="tools">
                    <i class="fas fa-question-circle info-icon"></i>
                    <a href="" class="collapse"> </a>
                    <a href="" class="fullscreen"> </a>
                </div>
            </div>
            <div class="portlet-body">
                <div id="chart_2_1" style="width: 100%; height: 200px; margin: 0 auto"></div>
            </div>
        </div>
    </div>
    <div class="col-lg-6 col-xs-12 col-sm-12">
        <div id="chart_container_2_2" class="portlet light bordered">
            <div class="portlet-title">
                <div class="caption ">
                    <span class="caption-subject font-blue-sharp bold">Top 10 Downloaders</span>
                    <span class="caption-helper"></span>
                </div>
                <div class="tools">
                    <i class="fas fa-question-circle info-icon"></i>
                    <a href="" class="collapse"> </a>
                    <a href="" class="fullscreen"> </a>
                </div>
            </div>
            <div class="portlet-body">
                <div id="chart_2_2" style="width: 100%; height: 200px; margin: 0 auto"></div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-lg-6 col-xs-12 col-sm-12">
        <div id="chart_container_3_1" class="portlet light bordered">
            <div class="portlet-title">
                <div class="caption ">
                    <span class="caption-subject font-blue-sharp bold">Users per Access Point</span>
                    <span class="caption-helper"></span>
                </div>
                <div class="tools">
                    <i class="fas fa-question-circle info-icon"></i>
                    <a href="" class="collapse"> </a>
                    <a href="" class="fullscreen"> </a>
                </div>
            </div>
            <div class="portlet-body">
                <div id="chart_3_1" style="width: 100%; height: 200px; margin: 0 auto"></div>
            </div>
        </div>
    </div>
    <div class="col-lg-6 col-xs-12 col-sm-12">
        <div id="chart_container_3_2" class="portlet light bordered">
            <div class="portlet-title">
                <div class="caption ">
                    <span class="caption-subject font-blue-sharp bold">Data Traffic per Access Point</span>
                    <span class="caption-helper"></span>
                </div>
                <div class="tools">
                    <i class="fas fa-question-circle info-icon"></i>
                    <a href="" class="collapse"> </a>
                    <a href="" class="fullscreen"> </a>
                </div>
            </div>
            <div class="portlet-body">
                <div id="chart_3_2" style="width: 100%; height: 200px; margin: 0 auto"></div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-lg-6 col-xs-12 col-sm-12">
        <div id="chart_container_4_1" class="portlet light bordered">
            <div class="portlet-title">
                <div class="caption ">
                    <span class="caption-subject font-blue-sharp bold">Downloaded Traffic</span>
                    <span class="caption-helper"></span>
                </div>
                <div class="tools">
                    <i class="fas fa-question-circle info-icon"></i>
                    <a href="" class="collapse"> </a>
                    <a href="" class="fullscreen"> </a>
                </div>
            </div>
            <div class="portlet-body">
                <div id="chart_4_1" style="width: 100%; height: 200px; margin: 0 auto"></div>
            </div>
        </div>
    </div>
    <div class="col-lg-6 col-xs-12 col-sm-12">
        <div id="chart_container_4_2" class="portlet light bordered">
            <div class="portlet-title">
                <div class="caption ">
                    <span class="caption-subject font-blue-sharp bold">Connected Users</span>
                    <span class="caption-helper"></span>
                </div>
                <div class="tools">
                    <i class="fas fa-question-circle info-icon"></i>
                    <a href="" class="collapse"> </a>
                    <a href="" class="fullscreen"> </a>
                </div>
            </div>
            <div class="portlet-body">
                <div id="chart_4_2" style="width: 100%; height: 200px; margin: 0 auto"></div>
            </div>
        </div>
    </div>
</div>

<div class="row text-center" style="display: none" id="pdf_url">
    website address: <a>www.elephantwifi.co.uk</a>
</div>
{% endblock %}

{% block page_scripts %}
<script type="text/javascript" class="init">
function genPDF() {
    var pdf_title = document.getElementById("pdf_title");
    if (pdf_title.style.display === "none") {
        pdf_title.style.display = "block";
    }

    var pdf_url = document.getElementById("pdf_url");
    if (pdf_url.style.display === "none") {
        pdf_url.style.display = "block";
    }

    var element = document.getElementsByClassName("page-content")[0];
    var opt = {
        margin:       1,
        filename:     'network_report.pdf',
        image:        { type: 'jpeg', quality: 0.98 },
        html2canvas:  { scale: 1 },
        jsPDF:        { unit: 'pt', format: [1280, 720], orientation: 'l' }
    };

    html2pdf().set(opt).from(element).save();

    // Hide the element after 2 seconds allowing the screenshot to be taken while the element is shown
    window.setTimeout(hidePdfElements, 2000);
}

function hidePdfElements() {
    var pdf_title = document.getElementById("pdf_title");
    pdf_title.style.display = "none";

    var pdf_url = document.getElementById("pdf_url");
    pdf_url.style.display = "none";
}

// Start the tour
$('#tour_btn').click(function(e) {
    // Instance the tour
    var tour = new Tour({
        backdropPadding: 3,
        backdrop: true,
        steps: [{
            element: "#donut_container_1",
            title: "Title of my step",
            content: "Content of my step",
            placement: "right"
        }, {
            element: "#donut_container_2",
            title: "Title of my step",
            content: "Content of my step",
            placement: "right"
        }, {
            element: "#donut_container_3",
            title: "Title of my step",
            content: "Content of my step",
            placement: "right"
        }, {
            element: "#donut_container_4",
            title: "Title of my step",
            content: "Content of my step",
            placement: "left"
        }, {
            element: "#chart_container_1_1",
            title: "Title of my step",
            content: "Content of my step",
            placement: "top"
        }, {
            element: "#chart_container_1_2",
            title: "Title of my step",
            content: "Content of my step",
            placement: "top"
        }, {
            element: "#chart_container_2_1",
            title: "Title of my step",
            content: "Content of my step",
            placement: "top"
        }, {
            element: "#chart_container_2_2",
            title: "Title of my step",
            content: "Content of my step",
            placement: "top"
        }, {
            element: "#chart_container_3_1",
            title: "Title of my step",
            content: "Content of my step",
            placement: "top"
        }, {
            element: "#chart_container_3_2",
            title: "Title of my step",
            content: "Content of my step",
            placement: "top"
        }, {
            element: "#chart_container_4_1",
            title: "Title of my step",
            content: "Content of my step",
            placement: "top"
        }, {
            element: "#chart_container_4_2",
            title: "Title of my step",
            content: "Content of my step",
            placement: "top"
        }
    ]});

    // Initialize the tour
    tour.init();
    tour.restart();
});

/**
 * We use bootstrap tour for the helper info on each chart
 * Populate an array with all the information
 */
var chart_container_content = [];
chart_container_content['chart_container_1_1_title'] = 'Top 10 Operating Systems Chart';
chart_container_content['chart_container_1_1_body']  = 'Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industrys standard dummy text ever since the 1500s, when an unknown printer took a galley of type'; 

chart_container_content['chart_container_1_2_title'] = 'Top 10 Browsers Chart'; 
chart_container_content['chart_container_1_2_body']  = 'Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industrys standard dummy text ever since the 1500s, when an unknown printer took a galley of type'; 

chart_container_content['chart_container_2_1_title'] = 'Top 10 Manufacturers Chart'; 
chart_container_content['chart_container_2_1_body']  = 'Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industrys standard dummy text ever since the 1500s, when an unknown printer took a galley of type'; 

chart_container_content['chart_container_2_2_title'] = 'Top 10 Downloaders Chart'; 
chart_container_content['chart_container_2_2_body']  = 'Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industrys standard dummy text ever since the 1500s, when an unknown printer took a galley of type'; 

chart_container_content['chart_container_3_1_title'] = 'Users Per Access Point Chart'; 
chart_container_content['chart_container_3_1_body']  = 'Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industrys standard dummy text ever since the 1500s, when an unknown printer took a galley of type'; 

chart_container_content['chart_container_3_2_title'] = 'Data Traffic per Access Point Chart'; 
chart_container_content['chart_container_3_2_body']  = 'Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industrys standard dummy text ever since the 1500s, when an unknown printer took a galley of type'; 

chart_container_content['chart_container_4_1_title'] = 'Downloaded Traffic Chart'; 
chart_container_content['chart_container_4_1_body']  = 'Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industrys standard dummy text ever since the 1500s, when an unknown printer took a galley of type'; 

chart_container_content['chart_container_4_2_title'] = 'Connected Users Chart'; 
chart_container_content['chart_container_4_2_body']  = 'Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industrys standard dummy text ever since the 1500s, when an unknown printer took a galley of type';

// When info icon is clicked display chart helper
$('.info-icon').click(function(e) {
    var element = $(this).parent().parent().parent().attr('id');
    console.log(element);

    // Instance the tour
    var tour = new Tour({
        template: "<div class='popover tour'><div class='arrow'></div><h3 class='popover-title'></h3><div class='popover-content'></div><div class='popover-navigation'><button class='btn btn-sm btn-default' data-role='end'>Close</button></div></div>",
        backdropPadding: 3,
        backdrop: true,
        steps: [{
            element: '#' + element,
            title: chart_container_content[element + '_title'],
            content: chart_container_content[element + '_body'],
            placement: "top"
        }
    ]});

    // Initialize the tour
    tour.init();
    tour.restart();
})

/**
 * initialise the arrays to append results to for download in CSV format
 */
var csv_data = [];

/**
 * file name and report title for CSV download
 */
var csv_filename = 'Network_Report-' + moment().format("DD_MMMM_YYYY_HHmm") + '.csv';
var csv_title = '';
var venue_name = '{{user.venue_name}}';

/**
 * respond to click on the CSV download button
 */
$('#csv_button').on('click', function() {
    /**
     * update export title to reflect selected range
     */
    var csv_title = 'ElephantWiFi: Network Report ({{user.venue_name}} - selected range: ' + $('#page_daterange_selected_large').text().replace(/,/g , '') + ')';

    /**
     * get the data from the charts
     */
    csv_data.push({
        heading: 'Overall metrics',
        process: true,
        data: [['DateTime', 'Most Popular Browser', 'Most Popular Operating System', 'Download Traffic', 'Avg Daily Roaming Dwell'],
               [
                    moment().format("DD MMMM YYYY HH:mm"),
                    $('#span_most_popular_browser').text().replace(/,/g , ''),
                    $('#span_most_popular_os').text().replace(/,/g , ''),
                    $('#span_total_downloads').text().replace(/,/g , ''),
                    $('#span_average_daily_roaming_dwell').text().replace(/,/g , '')
               ]]
               // when process is true there must be at least two arrays (lines) of content: headers and data
    });

    csv_data.push({
        heading: 'Top 10 Operating Systems',
        process: false,
        data: $('#chart_1_1').highcharts().getCSV() // when process is false we just push the output from Highcharts
    });

    csv_data.push({
        heading: 'Top 10 Browsers',
        process: false,
        data: $('#chart_1_2').highcharts().getCSV() // when process is false we just push the output from Highcharts
    });

    csv_data.push({
        heading: 'Top 10 Manufacturers',
        process: false,
        data: $('#chart_2_1').highcharts().getCSV() // when process is false we just push the output from Highcharts
    });

    csv_data.push({
        heading: 'Top 10 Downloaders',
        process: false,
        data: $('#chart_2_2').highcharts().getCSV() // when process is false we just push the output from Highcharts
    });

    csv_data.push({
        heading: 'Users Per Access Point',
        process: false,
        data: $('#chart_3_1').highcharts().getCSV() // when process is false we just push the output from Highcharts
    });

    csv_data.push({
        heading: 'Data Traffic Per Access Point',
        process: false,
        data: $('#chart_3_2').highcharts().getCSV() // when process is false we just push the output from Highcharts
    });

    csv_data.push({
        heading: 'Downloaded Traffic',
        process: false,
        data: $('#chart_4_1').highcharts().getCSV() // when process is false we just push the output from Highcharts
    });

    csv_data.push({
        heading: 'Connected Users',
        process: false,
        data: $('#chart_4_2').highcharts().getCSV() // when process is false we just push the output from Highcharts
    });

    exportToCsv(csv_filename, csv_title, venue_name, csv_data);

    csv_data = [];
});

/**
 * Global vars required
 */
var captive_portal = '{{current_user.primaryVenue.captive_portal}}';
var rangelength = 0;

/**
 * max range in milliseconds when to use hourly stats instead of daily
 */
var max_range_for_hourly = 3600*24*14*1000; // = 14 days

$(document).ready(function() {

    /***************************************************************
     * BEGIN All Ajax Functions
     ***************************************************************/

    /**
     * this callback function is used for:
     * - top 10 downloaders
     */
    function onClientsSessionsReceived(clients, sessions) {
        /**
         * finding top 10 users by data transfer
         * - filter sessions on "is_wired": false to only get sessions for wireless clients
         * - then clean up empty hostnames etc.
         */
        filtered_sessions = _.filter(sessions, {'is_wired': false});
        _.forEach(filtered_sessions, function(value, key) {
            _.defaults(value, {'tx_bytes': 0}, {'rx_bytes': 0});
        });

        /**
         * summarise tx_bytes per mac
         * - declare several vars beforehand
         */
        var totals      = [];
        var total_tx    = 0;
        var lookup      = {};
        var grouped     = _.groupBy(filtered_sessions, 'mac');

        _.forIn(grouped, function(value, key) {
            _.forEach(value, function(value, key) {
                total_tx += value.tx_bytes;
                client_mac = value.mac;
            });

            /**
             * look up the client in our clients stats array to get first seen date
             * - if client found, we push details for that client into the totals array
             */
            if(lookup = _.find(clients, { 'mac': client_mac }))  {
                /**
                 * if the found device does not have "hostname" set we assign the value of "name" (if set) or "mac"
                 */
                if(typeof lookup.hostname === 'undefined') {
                    if(typeof lookup.name != 'undefined') {
                        lookup.hostname = lookup.name;
                    } else {
                        lookup.hostname = lookup.mac;
                    }
                }

                /**
                 * create new object in totals array for found device
                 */
                totals.push({
                    hostname: lookup.hostname,
                    tx_bytes: total_tx,
                    first_seen: lookup.first_seen,
                    oui: lookup.oui
                });
            } else {
                /**
                 * we do nothing
                 */
            }

            /**
             * reset the var to 0 for the next iteration
             */
            total_tx = 0;
        });

        var sortedTotals = _.orderBy(totals, 'tx_bytes', ['desc']);
        var top10users = _.take(sortedTotals, 10);
        /**
         * end finding top 10 downloaders
         */

        /**
         * assign the data elements to vars for the downloaders chart in the options
         */
        var hostnames   = _.map(top10users, 'hostname');
        var txvalues    = _.map(top10users, 'tx_bytes');
        chart_2_2_Options.xAxis.categories = hostnames;
        chart_2_2.series[0].setData(txvalues);

        /**
         * redraw the top 10 downloaders chart
         */
        chart_2_2 = new Highcharts.Chart(chart_2_2_Options);
    }

    /**
     * callback function to process collected user stats for charts 1.1 and 1.2 and 2.1
     */
    function chart_1_1_DataReceived(data) {
        console.log(data);
        /**
         * summarise tx_bytes per mac
         * - declare several vars beforehand
         */
        var totals      = [];
        var total_tx    = 0;

        _.forIn(data, function(value, key) {            
            totals.push({
                os: value[0],
                browser: value[1],
                manufactures: value[2]
            });
        });

        /**
         * determine new versus repeat users
         * - declare some variables first
         */
        var user_count  = totals.length;

        /**
         * finding top 10 device operatingSystems used
         */
        var operatingSystems         = (_.countBy(_.map(totals, 'os')));
        var unsortedOperatingSystems = [];

        for (var operatingSystem in operatingSystems) {
            operatingSystems[operatingSystem] = Math.floor((operatingSystems[operatingSystem]/user_count)*1000)/10;
            unsortedOperatingSystems.push([operatingSystems[operatingSystem], operatingSystem]);
        }

        var sortedOperatingSystems = _.orderBy(unsortedOperatingSystems, [0], ['desc']);
        var top10OperatingSystems  = _.take(sortedOperatingSystems, 10);

        /**
         * assign the data elements to vars for the vendors chart in the options
         */
        var operatingSystemNames  = _.map(top10OperatingSystems, 1);
        var operatingSystemCounts = _.map(top10OperatingSystems, 0);

        // console.log(operatingSystemNames);

        chart_1_1_Options.xAxis.categories = operatingSystemNames;
        chart_1_1.series[0].setData(operatingSystemCounts);

        /**
         * redraw the top 10 vendors chart
         */
        chart_1_1 = new Highcharts.Chart(chart_1_1_Options);

        $('#span_most_popular_os').html(operatingSystemNames[0].toLocaleString());

        /**
         * finding top 10 device browsers used
         */
        var browsers        = (_.countBy(_.map(totals, 'browser')));
        var unsortedBrowser = [];

        for (var browser in browsers) {
            browsers[browser] = Math.floor((browsers[browser]/user_count)*1000)/10;
            unsortedBrowser.push([browsers[browser], browser]);
        }

        var sortedBrowser = _.orderBy(unsortedBrowser, [0], ['desc']);
        var top10Browsers  = _.take(sortedBrowser, 10);

        /**
         * assign the data elements to vars for the vendors chart in the options
         */
        var browserNames  = _.map(top10Browsers, 1);
        var browserCounts = _.map(top10Browsers, 0);
        chart_1_2_Options.xAxis.categories = browserNames;
        chart_1_2.series[0].setData(browserCounts);

        /**
         * redraw the top 10 vendors chart
         */
        chart_1_2 = new Highcharts.Chart(chart_1_2_Options);

        $('#span_most_popular_browser').html(browserNames[0].toLocaleString());

        /**
         * finding top 10 manufacturers used
         */
        var manufacturers         = (_.countBy(_.map(totals, 'manufactures')));
        var unsortedManufacturers = [];

        for (var manufacturer in manufacturers) {
            manufacturers[manufacturer] = Math.floor((manufacturers[manufacturer]/user_count)*1000)/10;
            unsortedManufacturers.push([manufacturers[manufacturer], manufacturer]);
        }

        var sortedManufacturers = _.orderBy(unsortedManufacturers, [0], ['desc']);
        var top10Manufacturers  = _.take(sortedManufacturers, 10);

        /**
         * assign the data elements to vars for the vendors chart in the options
         */
        var manufacturerNames  = _.map(top10Manufacturers, 1);
        var manufacturerCounts = _.map(top10Manufacturers, 0);
        chart_2_1_Options.xAxis.categories = manufacturerNames;
        chart_2_1.series[0].setData(manufacturerCounts);

        /**
         * redraw the top 10 vendors chart
         */
        chart_2_1 = new Highcharts.Chart(chart_2_1_Options);
    }

    /**
     * callback function to be called when ajax call receives data after initiated by daterangepicker
     */
    function onApHourlyStatsReceived(data) {
        /**
         * Load all the data for the charts
         */
        var aps = _.filter(data[0], {'type': 'uap'});

        /**
         * in case num_sta/bytes values are empty we need to set defaults
         */
        _.forEach(data[1], function(value, key) {
            return _.defaults(value, {'num_sta': 0}, {'bytes': 0});
        });

        /**
         * from here we work on the AP USER stats chart
         */
        var apUserStats =[];

        /**
         * clean up the objects in case we have offline devices etc and prepare APs array for AP User Stats chart
         * and for the traffic totals table
         */
        _.forEach(aps, function(value, key) {
            _.defaults(value, {'tx_bytes': 0}, {'rx_bytes': 0}, {'uptime': 0});

            var result = _.map(_.filter(data[1], { 'ap': value.mac }), function(obj) {
                return _.pick(obj, 'time', 'num_sta');
            });

            apUserStats.push({name: value.name, data: noGapsDataArray(_.sortBy(_.map(result, _.values),0), 3600)});
        });

        // console.log(apUserStats);

        /**
         * draw the ap USER stats chart
         */
        chart_3_1_Options.series = apUserStats;
        chart_3_1 = new Highcharts.Chart(chart_3_1_Options);

        /**
         * from here we work on the AP DATA stats chart
         */
        var result =[];
        var apDataStats =[];

        _.forEach(aps, function(value, key) {
            result = _.map(_.filter(data[1], { 'ap': value.mac }), function(obj) {
                return _.pick(obj, 'time', 'bytes');
            });

            /**
             * summarise the data transfered for each AP
             */
            apTotalBytes = _.sumBy(result, function(o) { return o.bytes; });
            value.totalBytes = apTotalBytes;

            apDataStats.push({name: value.name, data: noGapsDataArray(_.sortBy(_.map(result, _.values),0), 3600)});
        });

        /**
         * draw the AP DATA stats chart
         */
        chart_3_2_Options.series = apDataStats;
        chart_3_2 = new Highcharts.Chart(chart_3_2_Options);
    }

    /**
     * callback function to process collected user stats for charts 4.2 and 4.1
     */
    function onChart_4_2_DataReceived(data) {
        if (rangelength < max_range_for_hourly) {
            /**
             * we have hourly stats
             * first clean up data: empty hostnames etc
             */
            var total_bytes = 0;
            _.forEach(data, function(value, key) {
                _.defaults(value, {'wlan-num_sta': 0}, {'wlan_bytes': 0});
                total_bytes += value['wlan_bytes'];
            });

            var bucketsize = 3600;
        } else {
            /**
             * we have daily stats
             * first clean up data: empty hostnames etc
             * and shift the timestamps to the middle of the day
             */
            var total_bytes = 0;
            _.forEach(data, function(value, key) {
                _.defaults(value, {'wlan-num_sta': 0}, {'wlan_bytes': 0});
                //value.time = value.time + 43200000;
                value.time = parseInt(moment(value.time).startOf('day').add(12, 'hours').format('x'));
                total_bytes += value['wlan_bytes'];
            });

            var bucketsize = 3600*24;
        }

        /**
         * pick the attributes we need for each series and sort
         */
        var users = _.map(data, function(obj) {
            return _.pick(obj, 'time', 'wlan-num_sta');
        });

        var num_sta = _.map(_.sortBy(users, ['time', 'wlan-num_sta'], ['asc', 'asc']), _.values);

        /**
         * define series options
         */
        var seriesoptions = [
            {
                type: 'line',
                yAxis: 1,
                lineWidth: 2,
                states: {
                    hover: {
                        enabled: true,
                        lineWidth: 2
                    }
                },
                color: '#1A4B80',
                name: 'users'
            }
        ];

        chart_4_2_Options.series = seriesoptions;

        /**
         * push the data into the chart
         */
        chart_4_2 = new Highcharts.Chart(chart_4_2_Options);
        chart_4_2.series[0].setData(noGapsDataArray(num_sta, bucketsize));

        /**
         * download traffic chart
         * pick the attributes we need for each series (wlan_bytes) and sort
         */
        var bytes = _.map(data, function(obj) {
            return _.pick(obj, 'time', 'wlan_bytes');
        });

        var bytes_series = _.map(_.sortBy(bytes, ['time', 'wlan_bytes'], ['asc', 'asc']), _.values);

        /**
         * define series options for bytes
         */
        var bytes_seriesoptions = [
            {
                type: 'area',
                color: '#ff8214',
                name: 'download traffic'
            }
        ];

        chart_4_1_Options.series = bytes_seriesoptions;

        /**
         * push the data into the chart
         */
        chart_4_1 = new Highcharts.Chart(chart_4_1_Options);
        chart_4_1.series[0].setData(noGapsDataArray(bytes_series, bucketsize));

        /**
         * while we have the data also send summarised wlan_bytes (total_bytes) to the correct <span>
         */
        $('#span_total_downloads').html(humanFileSize(total_bytes));
    }

    /**
     * callback function to process collected *combined* user and registration stats for charts 4.2 and 4.1
     */
    function onChart_4_2_CombinedDataReceived(data) {
        if (rangelength < max_range_for_hourly) {
            /**
             * we have hourly stats
             * first clean up data: empty hostnames etc
             */
            var total_bytes = 0;
            _.forEach(data['users'], function(value, key) {
                _.defaults(value, {'wlan-num_sta': 0}, {'wlan_bytes': 0});
                total_bytes += value['wlan_bytes'];
            });

            var bucketsize = 3600;
        } else {
            /**
             * we have daily stats
             * first clean up data: empty hostnames etc
             * and shift the timestamps 12 hours to the middle of the day
             */
            var total_bytes = 0;
            _.forEach(data['users'], function(value, key) {
                _.defaults(value, {'wlan-num_sta': 0}, {'wlan_bytes': 0});
                //value.time = value.time - 7200000 + 43200000;
                value.time = parseInt(moment(value.time).startOf('day').add(12, 'hours').format('x'));
                total_bytes += value['wlan_bytes'];
            });
            _.forEach(data['user_logins']['registrations']['rows'], function(value, key) {
                //value.epoch_date = value.epoch_date + 43200000;
                value.epoch_date = parseInt(moment(value.epoch_date).startOf('day').add(12, 'hours').format('x'));
            });
            _.forEach(data['user_logins']['returning_logins']['rows'], function(value, key) {
                //value.epoch_date = value.epoch_date + 43200000;
                value.epoch_date = parseInt(moment(value.epoch_date).startOf('day').add(12, 'hours').format('x'));
            });

            var bucketsize = 3600*24;
        }

        /**
         * pick the attributes we need for each series (users and registrations) and sort
         */
        var users = _.map(data['users'], function(obj) {
            return _.pick(obj, 'time', 'wlan-num_sta');
        });

        var user_series         = _.map(_.sortBy(users, ['time', 'wlan-num_sta'], ['asc', 'asc']), _.values);

        var registrations       = data['user_logins']['registrations']['rows'];
        var registration_series = _.map(_.sortBy(registrations, ['epoch_date', 'registrations'], ['asc', 'asc']), _.values);

        var returning_logins       = data['user_logins']['returning_logins']['rows'];
        var returning_login_series = _.map(_.sortBy(returning_logins, ['epoch_date', 'returning_logins'], ['asc', 'asc']), _.values);

        /**
         *define series options
         */
        var seriesoptions = [
            {
                type: 'line',
                yAxis: 1,
                lineWidth: 2,
                states: {
                    hover: {
                        enabled: true,
                        lineWidth: 2
                    }
                },
                color: '#1A4B80',
                name: 'users'
            },
            {
                type: 'column',
                stacking: 'normal',
                yAxis: 1,
                states: {
                    hover: {
                        enabled: true,
                        lineWidth: 2
                    }
                },
                borderWidth: 0,
                color: '#ff8214',
                name: 'guest registrations'
            },
            {
                type: 'column',
                stacking: 'normal',
                yAxis: 1,
                states: {
                    hover: {
                        enabled: true,
                        lineWidth: 2
                    }
                },
                borderWidth: 0,
                color: '#003166',
                name: 'returning guests'
            }
        ];

        chart_4_2_Options.series = seriesoptions;

        /**
         * push the data into the chart
         */
        chart_4_2 = new Highcharts.Chart(chart_4_2_Options);
        chart_4_2.series[0].setData(noGapsDataArray(user_series, bucketsize));
        chart_4_2.series[1].setData(registration_series);
        chart_4_2.series[2].setData(returning_login_series);

        /**
         * download traffic chart
         * pick the attributes we need for each series (wlan_bytes) and sort
         */
        var bytes = _.map(data['users'], function(obj) {
            return _.pick(obj, 'time', 'wlan_bytes');
        });

        var bytes_series = _.map(_.sortBy(bytes, ['time', 'wlan_bytes'], ['asc', 'asc']), _.values);

        /**
         * define series options for bytes
         */
        var bytes_seriesoptions = [
            {
                type: 'area',
                color: '#ff8214',
                name: 'download traffic'
            }
        ];

        chart_4_1_Options.series = bytes_seriesoptions;

        /**
         * push the data into the chart
         */
        chart_4_1 = new Highcharts.Chart(chart_4_1_Options);
        chart_4_1.series[0].setData(noGapsDataArray(bytes_series, bucketsize));

        /**
         * while we have the data also send summarised wlan_bytes (total_bytes) to the correct <span>
         */
        $('#span_total_downloads').html(humanFileSize(total_bytes));
    }

    /**
     * Push the received dwelltime data to the page
     */
    function onAvgDwelltimeDataReceived(data) {
        var average_dwelltime = _.meanBy(data, function(o) { return o.duration; });

        /**
         * Push the metric to the correct <span>
         */
        $('#span_average_daily_roaming_dwell').html(Math.round(moment.duration(average_dwelltime, 'seconds').asMinutes()) + ' minutes');
    }

    /***************************************************************
     * END All Ajax Functions
     ***************************************************************/

    /***************************************************************
     * BEGIN Setting Chart Variables
     ***************************************************************/

    /***************************************************************
     * start of top 10 downloaders chart
     * container: chart_2_2
     ***************************************************************/

    var chart_2_2_Options = {
        chart: {
            renderTo: 'chart_2_2',
            type: 'bar'
        },
        plotOptions: {
            series: {
                pointWidth: 12
            }
        },
        title: {
            text: false
        },
        xAxis : {
            type: 'category'
        },
        yAxis: {
            borderColor: '#489DC1',
            labels: {
                step: 2,
                formatter: function () {
                    return humanFileSize(this.value);
                }

            }
        },
        tooltip: {
            formatter: function () {
                return '<b>' + this.x + '</b><br>' + humanFileSize(this.y);
            }
        },
        legend: {
            enabled: false
        },
        series: [{
            name: 'download'
        }]
    };

    /**
     * initialize downloaders top 10 chart
     */
    var chart_2_2 = new Highcharts.Chart(chart_2_2_Options);
    chart_2_2.showLoading();

    /***************************************************************
     * start of top 10 operating system chart chart
     * container: chart_1_1
     ***************************************************************/

    var chart_1_1_Options = {
        chart: {
            renderTo: 'chart_1_1',
            type: 'bar'
        },
        plotOptions: {
            series: {
                pointWidth: 12
            }
        },
        colors: ['#1c2746'],
        xAxis : {
            type: 'category'
        },
        tooltip: {
            formatter: function () {
                if (this.x === ''){
                    this.x = 'unknown';
                }
                return '<b>' + this.x + '</b><br>' + this.y.toLocaleString() + '%';
            }
        },
        legend: {
            enabled: false
        },
        series: [{
            name: 'operating system'
        }]
    };

    /**
     * initialize download traffic chart
     */
    var chart_1_1 = new Highcharts.Chart(chart_1_1_Options);
    chart_1_1.showLoading();

    /***************************************************************
     * start of top 10 browser chart
     * container: chart_1_2
     ***************************************************************/

    var chart_1_2_Options = {
        chart: {
            renderTo: 'chart_1_2',
            type: 'bar'
        },
        plotOptions: {
            series: {
                pointWidth: 12
            }
        },
        colors: ['#1c2746'],
        xAxis : {
            type: 'category'
        },
        tooltip: {
            formatter: function () {
                if (this.x === ''){
                    this.x = 'unknown';
                }
                return '<b>' + this.x + '</b><br>' + this.y.toLocaleString() + '%';
            }
        },
        legend: {
            enabled: false
        },
        series: [{
            name: 'browser'
        }]
    };

    /**
     * initialize download traffic chart
     */
    var chart_1_2 = new Highcharts.Chart(chart_1_2_Options);
    chart_1_2.showLoading();

    /***************************************************************
     * start of top 10 manufacturers chart
     * container: chart_2_1
     ***************************************************************/

    var chart_2_1_Options = {
        chart: {
            renderTo: 'chart_2_1',
            type: 'bar'
        },
        plotOptions: {
            series: {
                pointWidth: 12
            }
        },
        xAxis : {
            type: 'category'
        },
        tooltip: {
            formatter: function () {
                if (this.x === ''){
                    this.x = 'unknown';
                }
                return '<b>' + this.x + '</b><br>' + this.y.toLocaleString() + '%';
            }
        },
        legend: {
            enabled: false
        },
        series: [{
            name: 'browser'
        }]
    };

    /**
     * initialize download traffic chart
     */
    var chart_2_1 = new Highcharts.Chart(chart_2_1_Options);
    chart_2_1.showLoading();

    /***************************************************************
     * start of users per access point chart
     * container: chart_3_1
     ***************************************************************/

    var chart_3_1_Options = {
        chart: {
            renderTo: 'chart_3_1',
            type: 'line',
            zoomType: 'x'
        },
        title: {
            text: false
        },
        xAxis: {
            type: 'datetime',
            plotBands: weekends
        },
        tooltip: {
            shared: true,
            useHTML: true,
            borderWidth: 0,
            backgroundColor: "rgba(255,255,255,0)",
            shadow: false,
            formatter: function () {
                var tooltipcontent = '<b>' + moment(this.x).format("D MMMM YYYY, HH:mm") + '</b>';
                tooltipcontent += '<table style="width:100%">';
                var mySum = 0;

                /**
                 * we have to loop here as we don't yet know how many series we will have
                 */
                $.each(this.points, function () {
                    tooltipcontent += '<tr><td>' + this.series.name + ':&nbsp;</td><td style="text-align: right;">' + this.y + ' users</b><td></tr>';
                    mySum += this.y;
                });

                tooltipcontent += '<tr><td><b>Total:</b></td><td style="text-align: right;"><b>' + mySum.toLocaleString() + ' users</b><td></tr>';
                tooltipcontent += '</table>';
                return tooltipcontent;
            }
        }
    };

    /**
     * initialize download traffic chart
     */
    var chart_3_1 = new Highcharts.Chart(chart_3_1_Options);
    chart_3_1.showLoading();

    /***************************************************************
     * start of data traffic per access point chart
     * container: chart_3_2
     ***************************************************************/

    var chart_3_2_Options = {
        chart: {
            renderTo: 'chart_3_2',
            type: 'area',
            zoomType: 'x'
        },
        xAxis: {
            type: 'datetime',
            plotBands: weekends
        },
        yAxis: {
            labels: {
                step: 2,
                formatter: function () {
                    return humanFileSize(this.value);
                }
            }
        },
        tooltip: {
            shared: true,
            useHTML: true,
            borderWidth: 0,
            backgroundColor: "rgba(255,255,255,0)",
            shadow: false,
            formatter: function () {
                var tooltipcontent = '<b>' + moment(this.x).format("D MMMM YYYY, HH:mm") + '</b>';
                tooltipcontent += '<table style="width:100%">';
                var mySum = 0;

                /**
                 * we have to loop here as we don't yet know how many series we will have
                 */
                $.each(this.points, function () {
                    tooltipcontent += '<tr><td>' + this.series.name + ':&nbsp;</td><td style="text-align: right;">' + humanFileSize(this.y) + '</b><td></tr>';
                    mySum += this.y;
                });

                tooltipcontent += '<tr><td><b>Total:</b></td><td style="text-align: right;"><b>' + humanFileSize(mySum) + ' </b><td></tr>';
                tooltipcontent += '</table>';
                return tooltipcontent;
            }
        }
    };

    /**
     * initialize download traffic chart
     */
    var chart_3_2 = new Highcharts.Chart(chart_3_2_Options);
    chart_3_2.showLoading();

    /***************************************************************
     * start of connected users chart
     * container: chart_4_2
     ***************************************************************/
    var chart_4_2_Options = {
        chart: {
            renderTo: 'chart_4_2',
            type: 'line',
            alignTicks: false,
            zoomType: 'x'
        },
        title: {
            text: false
        },
        xAxis: {
            type: 'datetime',
            tickWidth: 1,
            tickLength: 10,
            gridLineWidth: 0,
            labels: {
                align: 'left',
                x: 5,
                y: 13
            },
            plotBands: weekendsDaily
        },
        yAxis: [
            {
                gridLineWidth: 0,
                labels: {
                    step: 2,
                    formatter: function () {
                        return humanFileSize(this.value);
                    }
                }
            },
            {
                allowDecimals: false,
                floor: 0,
                title: {
                    text: false
                }
            }
        ],
        tooltip: {
            shared: true,
            useHTML: true,
            borderWidth: 0,
            backgroundColor: "rgba(255,255,255,0)",
            shadow: false,
            formatter: function () {
                /**
                 * here we switch the header of the tooltip depending on the length of the selected range (thus also the resolution)
                 */
                if ((rangeEnd - rangeStart) < max_range_for_hourly) {
                    var tooltipcontent = '<b>' + moment(this.x).format("dddd D MMMM YYYY, HH:mm") + '</b>';
                } else {
                    var tooltipcontent = '<b>' + moment(this.x).format("dddd D MMMM YYYY") + '</b>';
                }

                tooltipcontent += '<table style="width:100%">';

                /**
                 * we have to loop here as we don't yet know how many series we will have
                 */
                $.each(this.points, function () {
                    /**
                     * we assume values over 100K to be bytes and not users...
                     */
                    if (this.y > 100000) {
                        tooltipcontent += '<tr><td>' + this.series.name + ':&nbsp;</td><td style="text-align: right;">' + humanFileSize(this.y) + '</b><td></tr>';
                    } else {
                        tooltipcontent += '<tr><td>' + this.series.name + ':&nbsp;</td><td style="text-align: right;">' + this.y.toLocaleString() + '</b><td></tr>';
                    }
                });

                tooltipcontent += '</table>';
                return tooltipcontent;
            }
        },
        legend: {
            shared: true,
            align: 'left',
            layout: 'horizontal',
            verticalAlign: 'top',
            x: 25,
            y: -5,
            floating: true,
            itemStyle: {
                fontSize: '12px',
                color: '#000000',
                fontWeight: 'normal'
            }
        }
    };

    /**
     * initialise both charts and show "loading" message
     */
    chart_4_2 = new Highcharts.Chart(chart_4_2_Options);
    chart_4_2.showLoading();

    /***************************************************************
     * start of download traffic chart
     * container: chart_4_1
     ***************************************************************/
    var chart_4_1_Options = {
        chart: {
            renderTo: 'chart_4_1',
            type: 'line',
            alignTicks: false,
            zoomType: 'x'
        },
        title: {
            text: false
        },
        xAxis: {
            type: 'datetime',
            tickWidth: 1,
            tickLength: 10,
            gridLineWidth: 0,
            labels: {
                align: 'left',
                x: 5,
                y: 13
            },
            plotBands: weekendsDaily
        },
        yAxis: {
            labels: {
                step: 2,
                formatter: function () {
                    return humanFileSize(this.value);
                }
            }
        },
        tooltip: {
            shared: true,
            useHTML: true,
            borderWidth: 0,
            backgroundColor: "rgba(255,255,255,0)",
            shadow: false,
            formatter: function () {
                /**
                 * here we switch the header of the tooltip depending on the length of the selected range (thus also the resolution)
                 */
                if ((rangeEnd - rangeStart) < max_range_for_hourly) {
                    var tooltipcontent = '<b>' + moment(this.x).format("dddd D MMMM YYYY, HH:mm") + '</b>';
                } else {
                    var tooltipcontent = '<b>' + moment(this.x).format("dddd D MMMM YYYY") + '</b>';
                }

                tooltipcontent += '<table style="width:100%">';

                /**
                 * we have to loop here as we don't yet know how many series we will have
                 */
                $.each(this.points, function () {
                    /**
                     * we assume values over 100K to be bytes and not users...
                     */
                    if (this.y > 100000) {
                        tooltipcontent += '<tr><td>' + this.series.name + ':&nbsp;</td><td style="text-align: right;">' + humanFileSize(this.y) + '</b><td></tr>';
                    } else {
                        tooltipcontent += '<tr><td>' + this.series.name + ':&nbsp;</td><td style="text-align: right;">' + this.y.toLocaleString() + '</b><td></tr>';
                    }
                });

                tooltipcontent += '</table>';
                return tooltipcontent;
            }
        },
        legend: {
            shared: true,
            align: 'left',
            layout: 'horizontal',
            verticalAlign: 'top',
            x: 50,
            y: -5,
            floating: true,
            itemStyle: {
                fontSize: '12px',
                color: '#000000',
                fontWeight: 'normal'
            }
        }
    };

    /**
     * initialise both charts and show "loading" message
     */
    chart_4_1 = new Highcharts.Chart(chart_4_1_Options);
    chart_4_1.showLoading();

    /***************************************************************
     * END Setting Chart Variables
     ***************************************************************/

    /***************************************************************
     * BEGIN daterangepicker from here
     ***************************************************************/

    /**
     * define $start and $end for most of the charts
     * and determine how far back do we go back to get clients stats
     * TODO:
     */
    var rangeEnd       = moment();
    var rangeStart     = moment().subtract(1, 'weeks').startOf('day');
    var rightNow       = moment();

    /**
     * initiate the daterangepicker with initial start/end and Label
     */
    page_daterange(rangeStart, rangeEnd);

    /**
     * functions to display the "active" custom date range and the picker for current page
     * - assuming start of data collection is January 1st, 2015
     * TODO:
     * - consider a venue variable that holds the start date and is checked/updated when setting up
     */
    $('#dashboard-report-range').daterangepicker({
        timePicker:             true,
        timePicker24Hour:       true,
        timePickerIncrement:    60,
        showISOWeekNumbers:     true,
        locale: {
            format: 'DD/MM/YYYY',
            firstDay: 1
        },
        ranges: {
           'Current week':     [moment().startOf('week'), rightNow],
           'Last week':        [moment().startOf('week').subtract(1, 'weeks'), moment().startOf('week').subtract(1, 'weeks').endOf('week')],
           'Past 7 days':      [rangeStart, rangeEnd],
           'Current month':    [moment().startOf('month'), moment().endOf('month')],
           'Last month':       [moment().startOf('month').subtract(1, 'months'), moment().startOf('month').subtract(1, 'months').endOf('month')],
           'Past 31 days':     [moment().startOf('day').subtract(31, 'days'), rightNow],
           'Current year':     [moment().startOf('year'), rightNow],
           'Past 365 days':    [moment().startOf('day').subtract(1, 'years'), rightNow]
        },
        startDate:   rangeStart,
        endDate:     rangeEnd,
        minDate:     '{{current_user.primaryVenue.venue_wifi.capture_start | date("d/m/Y", "Europe/London")}}',
        maxDate:     moment(),
        opens:       'left',
        applyClass:  'blue',
        cancelClass: 'red'
    }, page_daterange);

    /**
     * callback function to execute upon selected date range
     */
    function page_daterange(start, end) {
        console.log(start + ':' + end);
        /**
         * update these global variables for the daterangepicker and the ajax calls
         */
        rangeStart = start;
        rangeEnd = end;
        now = moment().valueOf();

        /**
         * historyhours is used to get stats for the users
         */
        var historyHours = Math.round((now - start)/(3600*1000));

        /**
         * enable spinners on the charts, <span>s and <div>s which will be updated
         */
        $('#span_total_visitors_this_period').html('<i class="fa fa-circle-o-notch fa-spin" style="font-size: 70%;"></i>');
        $('#span_busiest_time_of_day_this_period').html('<i class="fa fa-circle-o-notch fa-spin" style="font-size: 70%;"></i>');
        $('#span_average_dwell_time_this_period').html('<i class="fa fa-circle-o-notch fa-spin" style="font-size: 70%;"></i>');
        $('#span_average_visitors_per_day_this_period').html('<i class="fa fa-circle-o-notch fa-spin" style="font-size: 70%;"></i>');

        /**
         * place the selected range in the <span>s at the top of the page
         */
        $('#page_daterange_selected').html(start.format('dddd, D MMMM YYYY') + ' - ' + end.format('dddd, D MMMM YYYY'));
        $('#page_daterange_selected_small').html(start.format('D MMM YYYY') + ' - ' + end.format('D MMM YYYY'));

        /**
         * using promise to collect sessions and clients stats
         * - get the data for chart 2.2 and 2.1
         */
        $.when( $.ajax({
                url:        site.uri.public + '/elephantwifi/api/stats/allusers/' + historyHours,
                type:       'GET',
                dataType:   'json',
                error:      flashToasts
            }),
            $.ajax({
                url:        site.uri.public + '/elephantwifi/api/stats/sessions/' + start + '/' + end,
                type:       'GET',
                dataType:   'json',
                error:      flashToasts
            })).done(function(clients, sessions) {
                /**
                 * clients and sessions are the results from the first and second ajax requests, respectively
                 */
                onClientsSessionsReceived(clients[0], sessions[0]);
        });

        /**
         * get the data for chart 1.1
         */
        $.ajax({
            url:        '{{site.uri.public}}/elephantwifi/api/network_report/device_info/' + start + '/' + end,
            type:       'GET',
            dataType:   'json',
            success:    chart_1_1_DataReceived
        });

        /**
         * ajax function to get AP stats
         */
        $.ajax({
            url:        site.uri.public + '/elephantwifi/api/stats/ap/hourly/' + rangeStart + '/' + rangeEnd,
            type:       'GET',
            dataType:   'json',
            success:    onApHourlyStatsReceived,
            error:      flashToasts
        });

        /**
         * we get hourly stats
         */
        chart_4_2_Options.xAxis.plotBands = weekends;

        if (captive_portal === 'free') {
            /**
             * we get combined hourly stats using promise
             */
            rangelength = end - start;
            $.when( $.ajax({
                    url:        site.uri.public + '/elephantwifi/api/stats/venue/hourly/' + start + '/' + end,
                    type:       'GET',
                    dataType:   'json',
                    error:      flashToasts
                }),
                $.ajax({
                    url:        site.uri.public + '/elephantwifi/api/stats/user_logins/hourly/' + start + '/' + end,
                    type:       'GET',
                    dataType:   'json',
                    error:      flashToasts
                })).done(function(users, user_logins) {
                    /**
                     * users and registrations are the results from the first and second ajax requests, respectively
                     */
                    var data = [];
                    data['users'] = users[0];
                    data['user_logins'] = user_logins[0];
                    onChart_4_2_CombinedDataReceived(data);
                }
            );
        } else {
            /**
             * we get single hourly stats
             */
            rangelength = end - start;
            $.ajax({
                url:        site.uri.public + '/elephantwifi/api/stats/venue/hourly/' + start + '/' + end,
                type:       'GET',
                dataType:   'json',
                success:    onChart_4_2_DataReceived,
                error:      flashToasts
            });
        }

        /**
         * ajax function to get today's average dwell time
         */
        $.ajax({
            url:        site.uri.public + '/elephantwifi/api/dwelltime/average/' + start + "/" + end,
            type:       'GET',
            dataType:   'json',
            success:    onAvgDwelltimeDataReceived,
            error:      flashToasts
        });
    }

    /***************************************************************
     * END of daterangepicker
     ***************************************************************/

});

</script>
{% endblock %}