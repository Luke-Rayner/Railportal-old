{% extends "pages/layouts/layout-dashboard.html.twig" %}

{% block page %}
    {% set page = page | merge({
        "title"       : "User Connection Report",
        "description" : "User Connection Report page"
    }) %}
    {{ parent() }}
{% endblock %}

{% block content %}
<div class="page-head">
    <div class="row text-center" style="display: none" id="pdf_title">
        <img src="{{site.uri.public}}/images/WiFi-Logo-Image-Blue.png" height="50px" width="50px" style="margin-top: 5px"/>
        <u><h1 class="bold">INTELLI-SENSE</h1></u>
    </div>

    <div class="page-title">
        <h1>{{page.title}}
            {# <small>{{page.description}}</small> #}
        </h1>
    </div>

    <div class="page-toolbar">
        <div id="dashboard-report-range" data-display-range="1" class="pull-right tooltips btn btn-fit-height blue-soft" data-placement="top" data-original-title="Select a time frame">
            <span class="visible-sm-inline visible-md-inline visible-lg-inline" id="page_daterange_selected"></span><span class="visible-xs-inline" id="page_daterange_selected_small"></span>&nbsp;
            <i class="icon-calendar"></i>&nbsp;
            <span class="thin uppercase hidden-xs"></span>&nbsp;
            <i class="fa fa-angle-down"></i>
        </div>
    </div>

    <button class="btn green-jungle pull-right" style="margin-right: 10px" id="csv_button" aria-hidden="true" data-toggle="tooltip" data-placement="bottom" title="Download report data in CSV format">Excel Export</button>
    <button class="btn orange pull-right" style="margin-right: 5px" aria-hidden="true" {# onclick="window.print();" #} onclick="genPDF();" data-toggle="tooltip" data-placement="bottom" title="Print this page.">Print Report</button>
    <button class="btn btn-warning pull-right" id="tour_btn"style="margin-right: 5px" aria-hidden="true" data-toggle="tooltip" data-placement="bottom" title="Start Tour">Start Page Tour</button>
</div>

<br>

<div class="row">
    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
        <a id="donut_container_1" class="dashboard-stat dashboard-stat-v2 blue-soft" href="#">
            <div class="visual">
                <i class="fa fa-users"></i>
            </div>
            <div class="details">
                <div class="number bold">
                    <span id="span_average_visitors_per_year"><i class="fa fa-circle-o-notch fa-spin" style="font-size: 70%;"></i></span>
                </div>
                <div class="desc"> Average connections, per year </div>
            </div>
        </a>
    </div>
    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
        <a id="donut_container_2" class="dashboard-stat dashboard-stat-v2 blue-soft" href="#">
            <div class="visual">
                <i class="fa fa-clock-o"></i>
            </div>
            <div class="details">
                <div class="number bold">
                    <span id="span_average_visitors_per_month"><i class="fa fa-circle-o-notch fa-spin" style="font-size: 70%;"></i></span>
                </div>
                <div class="desc"> Average connections, per month </div>
            </div>
        </a>
    </div>
    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
        <a id="donut_container_3" class="dashboard-stat dashboard-stat-v2 blue-soft" href="#">
            <div class="visual">
                <i class="fa fa-cloud-download"></i>
            </div>
            <div class="details">
                <div class="number bold">
                    <span id="span_average_visitors_per_week"><i class="fa fa-circle-o-notch fa-spin" style="font-size: 70%;"></i></span>
                </div>
                <div class="desc"> Average connections, per week </div>
            </div>
        </a>
    </div>
    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
        <a id="donut_container_4" class="dashboard-stat dashboard-stat-v2 blue-soft" href="#">
            <div class="visual">
                <i class="fa fa-users"></i>
            </div>
            <div class="details">
                <div class="number bold">
                    <span id="span_average_visitors_per_day"><i class="fa fa-circle-o-notch fa-spin" style="font-size: 70%;"></i></span>
                    </div>
                <div class="desc"> Average connections, per day </div>
            </div>
        </a>
    </div>
</div>
<div class="row">
    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
        <a id="donut_container_5" class="dashboard-stat dashboard-stat-v2 yellow-gold" href="#">
            <div class="visual">
                <i class="fa fa-users"></i>
            </div>
            <div class="details">
                <div class="number bold">
                    <span id="span_total_visitors_this_period"><i class="fa fa-circle-o-notch fa-spin" style="font-size: 70%;"></i></span>
                </div>
                <div class="desc"> Total connections this period </div>
            </div>
        </a>
    </div>
    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
        <a id="donut_container_6" class="dashboard-stat dashboard-stat-v2 yellow-gold" href="#">
            <div class="visual">
                <i class="fa fa-clock-o"></i>
            </div>
            <div class="details">
                <div class="number bold">
                    <span id="span_busiest_time_of_day_this_period"><i class="fa fa-circle-o-notch fa-spin" style="font-size: 70%;"></i></span>
                </div>
                <div class="desc"> Busiest time of day </div>
            </div>
        </a>
    </div>
    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
        <a id="donut_container_7" class="dashboard-stat dashboard-stat-v2 yellow-gold" href="#">
            <div class="visual">
                <i class="fa fa-cloud-download"></i>
            </div>
            <div class="details">
                <div class="number bold">
                    <span id="span_average_dwell_time_this_period"><i class="fa fa-circle-o-notch fa-spin" style="font-size: 70%;"></i></span>
                </div>
                <div class="desc"> Average connection time </div>
            </div>
        </a>
    </div>
    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
        <a id="donut_container_8" class="dashboard-stat dashboard-stat-v2 yellow-gold" href="#">
            <div class="visual">
                <i class="fa fa-users"></i>
            </div>
            <div class="details">
                <div class="number bold">
                    <span id="span_average_visitors_per_day_this_period"><i class="fa fa-circle-o-notch fa-spin" style="font-size: 70%;"></i></span>
                    </div>
                <div class="desc"> Average connections per day </div>
            </div>
        </a>
    </div>
</div>
<div class="clearfix"></div>
<!-- END VISITOR REPORT STATS -->
<!-- START PORTLETS -->

<div class="row" style="PAGE-BREAK-AFTER: always">
    <div class="col-lg-6 col-xs-12 col-sm-12">
        <div id="chart_container_1_1" class="portlet light bordered">
            <div class="portlet-title">
                <div class="caption ">
                    <span class="caption-subject font-blue-sharp bold">Top 10 Zones</span>
                    <span class="caption-helper">by connections</span>
                </div>
                <div class="tools">
                    <i class="fas fa-question-circle info-icon"></i>
                    <a href="" class="collapse"> </a>
                    <a href="" class="fullscreen"> </a>
                </div>
            </div>
            <div class="portlet-body">
                <div id="chart_1_1" style="width: 100%; height: 200px; margin: 0 auto"></div>
            </div>
        </div>
    </div>
    <div class="col-lg-6 col-xs-12 col-sm-12">
        <div id="chart_container_1_2" class="portlet light bordered">
            <div class="portlet-title">
                <div class="caption ">
                    <span class="caption-subject font-blue-sharp bold">New vs Repeat</span>
                    <span class="caption-helper">for total users</span>
                </div>
                <div class="tools">
                    <i class="fas fa-question-circle info-icon"></i>
                    <a href="" class="collapse"> </a>
                    <a href="" class="fullscreen"> </a>
                </div>
            </div>
            <div class="portlet-body">
                <div id="chart_1_2" style="width: 100%; height: 200px; margin: 0 auto"></div>
            </div>
        </div>
    </div>
</div>

<!-- Hidden chart for the busiest zone csv chart -->
<div class="row hide">
    <div class="col-lg-12 col-xs-12 col-sm-12">
        <div class="portlet-body">
            <div id="chart_zones_hidden" style="width: 100%; height: 250px; margin: 0 auto"></div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-lg-6 col-xs-12 col-sm-12">
        <div id="chart_container_3_1" class="portlet light bordered">
            <div class="portlet-title">
                <div class="caption ">
                    <span class="caption-subject font-blue-sharp bold">Time of Day</span>
                    <span class="caption-helper">average users per hour</span>
                </div>
                <div class="tools">
                    <i class="fas fa-question-circle info-icon"></i>
                    <a href="" class="collapse"> </a>
                    <a href="" class="fullscreen"> </a>
                </div>
            </div>
            <div class="portlet-body">
                <div id="chart_3_1" style="width: 100%; height: 200px; margin: 0 auto"></div>
            </div>
        </div>
    </div>
    <div class="col-lg-6 col-xs-12 col-sm-12">
        <div id="chart_container_3_2" class="portlet light bordered">
            <div class="portlet-title">
                <div class="caption ">
                    <span class="caption-subject font-blue-sharp bold">Connection Time Analysis</span>
                    <span class="caption-helper">per day</span>
                </div>
                <div class="tools">
                    <i class="fas fa-question-circle info-icon"></i>
                    <a href="" class="collapse"> </a>
                    <a href="" class="fullscreen"> </a>
                </div>
            </div>
            <div class="portlet-body">
                <div id="chart_3_2" style="width: 100%; height: 200px; margin: 0 auto"></div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-lg-12 col-xs-12 col-sm-12">
        <div id="chart_container_1_2" class="portlet light bordered">
            <div class="portlet-title">
                <div class="caption ">
                    <span class="caption-subject font-blue-sharp bold">WiFi Connections Vs Internet Users</span>
                    <span class="caption-helper"></span>
                </div>
                <div class="tools">
                    <i class="fas fa-question-circle info-icon"></i>
                    <a href="" class="collapse"> </a>
                    <a href="" class="fullscreen"> </a>
                </div>
            </div>
            <div class="portlet-body">
                <div id="chart_4_1" style="width: 100%; height: 300px; margin: 0 auto"></div>
            </div>
        </div>
    </div>
</div>

<div class="row text-center" style="display: none" id="pdf_url">
    website address: <a>www.elephantwifi.co.uk</a>
</div>
{% endblock %}

{% block page_scripts %}
<script type="text/javascript" class="init">
function genPDF() {
    var pdf_title = document.getElementById("pdf_title");
    if (pdf_title.style.display === "none") {
        pdf_title.style.display = "block";
    }

    var pdf_url = document.getElementById("pdf_url");
    if (pdf_url.style.display === "none") {
        pdf_url.style.display = "block";
    }

    var element = document.getElementsByClassName("page-content")[0];
    var opt = {
        margin:       1,
        filename:     'wifi_connection_report.pdf',
        image:        { type: 'jpeg', quality: 0.98 },
        html2canvas:  { scale: 1 },
        jsPDF:        { unit: 'pt', format: [1280, 720], orientation: 'l' }
    };

    html2pdf().set(opt).from(element).save();
    
    // Hide the element after 2 seconds allowing the screenshot to be taken while the element is shown
    window.setTimeout(hidePdfElements, 2000);
}

function hidePdfElements() {
    var pdf_title = document.getElementById("pdf_title");
    pdf_title.style.display = "none";

    var pdf_url = document.getElementById("pdf_url");
    pdf_url.style.display = "none";
}

/**
 * We use bootstrap tour for the helper info on each chart
 * Populate an array with all the information
 */
var chart_container_content = [];
chart_container_content['chart_container_1_1_title'] = 'Top 10 zones.';
chart_container_content['chart_container_1_1_body']  = 'This chart shows the top 10 busiest WiFi zones for the chosen date and time.  The Blue section represents repeat visitors and Orange are new visitors. Hover over each bar for more information.'; 

chart_container_content['chart_container_1_2_title'] = 'New Vs Repeat.'; 
chart_container_content['chart_container_1_2_body']  = 'This Donut shows the total number of visitors during the chosen date and time as a breakdown between New and Repeat visitors. Hover over each coloured section for more information.'; 

chart_container_content['chart_container_2_1_title'] = 'Age breakdown.'; 
chart_container_content['chart_container_2_1_body']  = 'This chart shows the breakdown of visitors age based on the number of connections for the chosen date and time. Connections are based on visitors that we have stored in our database and will include both connected devices and WiFi browsers. Click on the key disable or enable any of the options.'; 

chart_container_content['chart_container_2_2_title'] = 'Weather data.'; 
chart_container_content['chart_container_2_2_body']  = 'This chart shows weather information per day for the chosen date period. Time is not taken into account on this chart. Hover over each day for more information. Items in the key can be enabled or disabled as required.'; 

chart_container_content['chart_container_3_1_title'] = 'Time of day.'; 
chart_container_content['chart_container_3_1_body']  = 'This chart shows the average number of visitors per hour based on the chosen date and time. Where a single day is chosen the figures are actual. Connections are based on visitors that we have stored in our database and will include both connected devices and WiFi browsers. Hover over the chart for more information.'; 

chart_container_content['chart_container_3_2_title'] = 'Connection time analysis'; 
chart_container_content['chart_container_3_2_body']  = 'This chart shows the number of connections per day for the chosen date and time. Each colour represents a different time zone. The dashed light blue line is the average connection time i.e. the average of all time segments. Click on the key to enable or disable time segments. Hover over the chart for a more detailed view for each day. <5 mins is disabled by default as we deem these visitors as people passing through and not shoppers.'; 

// Start the tour
$('#tour_btn').click(function(e) {
    // Instance the tour
    var tour = new Tour({
        backdropPadding: 3,
        backdrop: true,
        steps: [{
            element: "#donut_container_1",
            title: "Avg visitors per year.",
            content: "This shows the average visitors per year starting from when the venue went live. Note until the venue is 1 year old it will show the total number of visitors.",
            placement: "right"
        }, {
            element: "#donut_container_2",
            title: "Avg visitors per month.",
            content: "This shows the average visitors per month starting from when the venue went live. Note until the venue is 1 month old it will show the total number of visitors.",
            placement: "right"
        }, {
            element: "#donut_container_3",
            title: "Avg visitors per week.",
            content: "This shows the average visitors per week starting from when the venue went live.",
            placement: "right"
        }, {
            element: "#donut_container_4",
            title: "Avg visitors per day.",
            content: "This shows the average visitors per day starting from when the venue went live.",
            placement: "left"
        }, {
            element: "#donut_container_5",
            title: "Total visitors this period.",
            content: "This shows the total number of visitors during the chosen date and time.",
            placement: "right"
        }, {
            element: "#donut_container_6",
            title: "Busiest time of day.",
            content: "This shows the busiest time of day for the chosen date and time. Where the requested date is more than 1 day it’s based on the busiest average time. ",
            placement: "right"
        }, {
            element: "#donut_container_7",
            title: "Avg connection time.",
            content: "This shows the average connection time during the chosen date and time period. Connection time includes connected devices and internet browsers.",
            placement: "right"
        }, {
            element: "#donut_container_8",
            title: "Avg visitors.",
            content: "This shows the average visitors per day for the chosen date and time.",
            placement: "left"
        }, {
            element: "#chart_container_1_1",
            title: chart_container_content['chart_container_1_1_title'],
            content: chart_container_content['chart_container_1_1_body'],
            placement: "top"
        }, {
            element: "#chart_container_1_2",
            title: chart_container_content['chart_container_1_2_title'],
            content: chart_container_content['chart_container_1_2_body'],
            placement: "top"
        }, {
            element: "#chart_container_2_1",
            title: chart_container_content['chart_container_2_1_title'],
            content: chart_container_content['chart_container_2_1_body'],
            placement: "top"
        }, {
            element: "#chart_container_2_2",
            title: chart_container_content['chart_container_2_2_title'],
            content: chart_container_content['chart_container_2_2_body'],
            placement: "top"
        }, {
            element: "#chart_container_3_1",
            title: chart_container_content['chart_container_3_1_title'],
            content: chart_container_content['chart_container_3_1_body'],
            placement: "top"
        }, {
            element: "#chart_container_3_2",
            title: chart_container_content['chart_container_3_2_title'],
            content: chart_container_content['chart_container_3_2_body'],
            placement: "top"
        }
    ]});

    // Initialize the tour
    tour.init();
    tour.restart();
});

// When info icon is clicked display chart helper
$('.info-icon').click(function(e) {
    var element = $(this).parent().parent().parent().attr('id');
    console.log(element);

    // Instance the tour
    var tour = new Tour({
        template: "<div class='popover tour'><div class='arrow'></div><h3 class='popover-title'></h3><div class='popover-content'></div><div class='popover-navigation'><button class='btn btn-sm btn-default' data-role='end'>Close</button></div></div>",
        backdropPadding: 3,
        backdrop: true,
        steps: [{
            element: '#' + element,
            title: chart_container_content[element + '_title'],
            content: chart_container_content[element + '_body'],
            placement: "top"
        }
    ]});

    // Initialize the tour
    tour.init();
    tour.restart();
})

/**
 * file name and report title for CSV download
 */
var csv_filename = 'Visitor_Report-' + moment().format("DD_MMMM_YYYY_HHmm") + '.csv';
var csv_title = '';
var venue_name = '{{user.venue_name}}';

/**
 * respond to click on the CSV download button
 */
$('#csv_button').on('click', function() {
    /**
     * initialise the arrays to append results to for download in CSV format
     */
    var csv_data = [];

    /**
     * update export title to reflect selected range
     */
    var csv_title = 'ElephantWiFi: Visitor Report ({{user.venue_name}} - selected range: ' + $('#page_daterange_selected_large').text().replace(/,/g , '') + ')';

    /**
     * get the data from the charts
     */
    csv_data.push({
        heading: 'Overall metrics',
        process: true,
        data: [['DateTime', 'Average visitors per year', 'Average visitors per month', 'Average visitors per week', 'Average visitors per day', 'Total visitors this period', 'Busiest time of day', 'Avg dwell time', 'Average visitors per day'],
               [
                    moment().format("DD MMMM YYYY HH:mm"),
                    $('#span_average_visitors_per_year').text().replace(/,/g , ''),
                    $('#span_average_visitors_per_month').text().replace(/,/g , ''),
                    $('#span_average_visitors_per_week').text().replace(/,/g , ''),
                    $('#span_average_visitors_per_day').text().replace(/,/g , ''),
                    $('#span_total_visitors_this_period').text().replace(/,/g , ''),
                    $('#span_busiest_time_of_day_this_period').text().replace(/,/g , ''),
                    $('#span_average_dwell_time_this_period').text().replace(/,/g , ''),
                    $('#span_average_visitors_per_day_this_period').text().replace(/,/g , ''),
               ]]
               // when process is true there must be at least two arrays (lines) of content: headers and data
    });

    csv_data.push({
        heading: 'Busiest Zones',
        process: false,
        data: $('#chart_zones_hidden').highcharts().getCSV() // when process is false we just push the output from Highcharts
    });

    csv_data.push({
        heading: 'Total Visitors - New Vs Repeat',
        process: false,
        data: $('#chart_1_2').highcharts().getCSV() // when process is false we just push the output from Highcharts
    });

    csv_data.push({
        heading: 'Time of Day - average',
        process: false,
        data: $('#chart_3_1').highcharts().getCSV() // when process is false we just push the output from Highcharts
    });

    csv_data.push({
        heading: 'Dwell Time Analysis',
        process: false,
        data: $('#chart_3_2').highcharts().getCSV() // when process is false we just push the output from Highcharts
    });

    exportToCsv(csv_filename, csv_title, venue_name, csv_data);

    csv_data = [];
});

$(document).ready(function() {
    /**
     * define this chart and it's weather icons globally for use in the callback functions
     */
    var chart_3_1 = {};
    var weather_icons_array = [];

    /***************************************************************
     * start of users chart
     * container: chart_4_1
     * - first we define the options for this chart
     ***************************************************************/
    var chart_4_1_Options = {
        chart: {
            renderTo: 'chart_4_1',
            backgroundColor: '#FFFFFF',
            zoomType: 'x'
        },
        xAxis: {
            type: 'datetime',
            plotBands: weekends
        },
        yAxis: [
            {
                floor: null,
                labels: {
                    format: '{value}'
                }
            }
        ],
        tooltip: {
            shared: true
        },
        plotOptions: {
            column: {
                borderWidth: 0//,
                //pointPlacement: 'between'
            },
            line: {
                pointPlacement: 'between'
            },
            series: {
                marker: {
                    enabled: false,
                    symbol: 'circle',
                    radius: 2,
                    states: {
                        hover: {
                            enabled: true
                        }
                    }
                }
            }
        },
        legend: {
            enabled: true
        }
    };

    /**
     * initialise the chart and show "loading" message
     */
    chart_4_1 = new Highcharts.Chart(chart_4_1_Options);
    chart_4_1.showLoading();

    /**
     * callback function to process collected user stats for chart 4.1
     */
    function chart_4_1_DataReceived(data) {
        data = data.rows
        console.log(data)
        /**
         * define series options
         */
        var seriesoptions = [
            {
                type: 'spline',
                lineWidth: 2,
                states: {
                    hover: {
                        enabled: true,
                        lineWidth: 2
                    }
                },
                color: '#DD686E',
                name: 'Total Users',
                pointRange: 24 * 3600 * 1000,
                connectNulls: false
            },
            {
                type: 'spline',
                lineWidth: 2,
                states: {
                    hover: {
                        enabled: true,
                        lineWidth: 2
                    }
                },
                color: '#132149',
                name: 'Total Browsers',
                pointRange: 24 * 3600 * 1000,
                connectNulls: false
            }
        ];

        chart_4_1_Options.series = seriesoptions;

        // var total_visitor_count = 0;
        // var total_auth_visitor_count = 0;
        // var total_visitors = []
        // var total_auth_visitors = []
        // $.each(data, function(key, value){
        //     total_visitor_count += value.total_device_uuid;
        //     total_auth_visitor_count += value.has_authorised_device_uuid;

        //     total_visitors.push([value.day_epoch * 1000, total_visitor_count]);
        //     total_auth_visitors.push([value.day_epoch * 1000, total_auth_visitor_count]);
        // });
        // console.log(total_visitors);

        var total_visitors = []
        var total_auth_visitors = []
        $.each(data, function(key, value){
            total_visitors.push([value.day_epoch * 1000, value.total_device_uuid]);
            total_auth_visitors.push([value.day_epoch * 1000, value.has_authorised_device_uuid]);
        });
        console.log(total_visitors);

        /**
         * push the data into the chart
         */
        chart_4_1 = new Highcharts.Chart(chart_4_1_Options);
        chart_4_1.series[0].setData(total_visitors);
        chart_4_1.series[1].setData(total_auth_visitors);
    }
    /***************************************************************
     * end of chart 1.1
     ***************************************************************/

    /***************************************************************
     * BEGIN All Ajax Functions
     ***************************************************************/

    /**
     * Then push the received average visitor metrics to the top row donuts
     */
    function onAvgVisitorMetricsReceived(data) {
        $('#span_average_visitors_per_year').html(data.average_yearly.toLocaleString());
        $('#span_average_visitors_per_month').html(data.average_monthly.toLocaleString());
        $('#span_average_visitors_per_week').html(data.average_weekly.toLocaleString());
        $('#span_average_visitors_per_day').html(data.average_daily.toLocaleString());
    }

    /**
     * callback to be called from the bundled ajax calls
     */
    function onChart_1_2_DataReceived(series) {

        data = series;

        /**
         * NOTE: with this function we also feed the "total visitors" data to chart 1.2
         */
        var totalnew    = 0;
        var totalrepeat = 0;

        if (typeof data.new !== 'undefined') {
            _.forEach(data.new, function(value) {
                totalnew += value[1];
            });

            _.forEach(data.repeat, function(value) {
                totalrepeat += value[1];
            });
        }

        /**
         * define font size percentage for the donut contents, reduce size if total is over 1M
         */
        var chart_1_2__font_size_perc = 150;
        if (totalnew + totalrepeat >= 1000000) {
            var chart_1_2__font_size_perc = 120;
        }

        chart_1_2_Options.title.text = '<b style="font-size: ' + chart_1_2__font_size_perc + '%; font-weight: bold;">' + (totalnew + totalrepeat).toLocaleString() + '</b><br><b style="font-size: 10px">Total</b>';
        var chart_1_2 = new Highcharts.Chart(chart_1_2_Options);
        chart_1_2.series[0].setData([totalnew, totalrepeat]);

        /**
         * NOTE: with this function we also feed #span_total_visitors_this_period donut
         */
        $('#span_total_visitors_this_period').html((totalnew + totalrepeat).toLocaleString());


        /**
         * NOTE: with this function we also feed the "average visitors" data to donut 4
         */
        var total_visitors = totalnew + totalrepeat;
        var counter = data.new.length;

        if (counter > 1) {
            var average = Math.floor(total_visitors/counter);
        } else {
            var average = total_visitors;
        }

        $('#span_average_visitors_per_day_this_period').html(average.toLocaleString());
    }

    /**
     * callback to be called from the bundled ajax calls
     */
    function chart_3_1_DataReceived(series) {

        data = series;
        
        /**
         * do something with the data
         */
        var seriesoptions = [
            {
                type: 'area',
                color: '#e25826', // e25826
                name: 'average users'
            }
        ];

        chart_3_1_Options.series = seriesoptions;
        chart_3_1 = new Highcharts.Chart(chart_3_1_Options);
        chart_3_1.series[0].setData(data);

        /**
         * here we also get the busiest hour and send that to donut 4
         */
        var hours = _.sortBy(data, function(value, key) {
            return value[1];
        });

        if (hours.length > 0) {
            $('#span_busiest_time_of_day_this_period').html((_.last(hours)[0]) + ':00 - ' + (_.last(hours)[0] + 1) + ':00');
        } else {
            $('#span_busiest_time_of_day_this_period').html('<span style="font-size: 60%;">no data</span>');
        }
    }

    /**
     * callback to be called from the bundled ajax calls
     */
    function onChart_3_2_DataReceived(series) {

        data = series;

        /**
         * define the series received
         */
        var seriesoptions = [
            {
                type: 'line',
                name: 'average dwelltime',
                yAxis: 1,
                color: '#C6D4FC',
                dashStyle: 'LongDash'
            },
            {
                type: 'area',
                name: '{{current_user.primaryVenue.dt_level_5_label}}',
                color: '#949898'
            },
            {
                type: 'area',
                name: '{{current_user.primaryVenue.dt_level_4_label}}',
                color: '#5A5A5A'
            },
            {
                type: 'area',
                name: '{{current_user.primaryVenue.dt_level_3_label}}',
                color: '#6EB553'
            },
            {
                type: 'area',
                name: '{{current_user.primaryVenue.dt_level_2_label}}',
                color: '#4E5977'
            },
            {
                type: 'area',
                name: '{{current_user.primaryVenue.dt_level_1_label}}',
                color: '#E9825C'
            },
            {
                type: 'area',
                name: '{{current_user.primaryVenue.dt_skipped_label}}',
                visible: false,
                color: '#DD686E' // otherwise this becomes purple
            }
        ];

        /**
         * if our date range is longer than 2 days, we disable the markers for clean lines
         * if shorter we switch to a stacked column chart
         */
        if (data['dt_level_1'].length > 2) {
            chart_3_2_Options.plotOptions.series.marker.enabled = false;
        } else {
            chart_3_2_Options.plotOptions.series.marker.enabled = true;

            $.each(seriesoptions, function () {
                if (this.type == 'area') {
                    this.type = 'column';
                }
            });
        }

        chart_3_2_Options.series = seriesoptions;
        chart_3_2 = new Highcharts.Chart(chart_3_2_Options);
        chart_3_2.series[6].setData(noGapsDataArray(data['dt_skipped'], 86400));
        chart_3_2.series[5].setData(noGapsDataArray(data['dt_level_1'], 86400));
        chart_3_2.series[4].setData(noGapsDataArray(data['dt_level_2'], 86400));
        chart_3_2.series[3].setData(noGapsDataArray(data['dt_level_3'], 86400));
        chart_3_2.series[2].setData(noGapsDataArray(data['dt_level_4'], 86400));
        chart_3_2.series[1].setData(noGapsDataArray(data['dt_level_5'], 86400));
        chart_3_2.series[0].setData(noGapsDataArray(data['dt_average'], 86400));
        chart_3_2.xAxis[0].update({
            plotBands: weekends
        });

        // Load all the data into the DOM
        var average_array = [];
        var sum = 0;

        for (var i = 0; i < data.dt_average.length; i++){
            average_array.push(data.dt_average[i][1]);
        }

        for (var i = 0; i < average_array.length; i++){
            sum += average_array[i]; //don't forget to add the base
        }

        var average = Math.round(sum/average_array.length);

        $('#span_average_dwell_time_this_period').html(average + ' <span style="font-size: 60%;">minutes</span>');
    }

    /**
     * callback to be called from the bundled ajax calls
     */
    function chart_1_1_DataReceived(series) {
        /*
        Load all the data for the chart
        */
        data = series;

        /*
        sort the json results (zone with highest visitor count first)
        */
        data.sort(function(a, b){
            var x=a[1];
            var y=b[1];
            return y-x;
        });

        /**
         * only "take" top 10 from "data" to display in the chart
         */
        var top10 = _.take(data, 10);

        repeatVisitors = [],
        newVisitors = []

        for (var i = 0; i < top10.length; i++) {
            repeatVisitors.push([top10[i][0], top10[i][1]]);
            newVisitors.push([top10[i][0], top10[i][2]]);
        }

        /**
         * Get the data to add to the hidden chart used for the csv download
         */
        csvRepeatVisitors = [],
        csvNewVisitors = []

        for (var i = 0; i < data.length; i++) {
            csvRepeatVisitors.push([data[i][0], data[i][1]]);
            csvNewVisitors.push([data[i][0], data[i][2]]);
        }

        var seriesoptions = [
            {
                type: 'bar', // default chart type
                states: {
                    hover: {
                        enabled: true
                    }
                },
                color: '#e25826',
                name: 'new users',
                stack: 'visitors'
            },
            {
                type: 'bar', // default chart type
                states: {
                    hover: {
                        enabled: true
                    }
                },
                color: '#132149',
                name: 'repeat users',
                stack: 'visitors'
            }
        ];
        chart_1_1_Options.series = seriesoptions;
        var chart_1_1 = new Highcharts.Chart(chart_1_1_Options);
        chart_1_1.series[1].setData(repeatVisitors);
        chart_1_1.series[0].setData(newVisitors);

        // chart_zones_hidden
        chart_zones_hidden_Options.series = seriesoptions;
        var chart_zones_hidden = new Highcharts.Chart(chart_zones_hidden_Options);
        chart_zones_hidden.series[1].setData(csvRepeatVisitors);
        chart_zones_hidden.series[0].setData(csvNewVisitors);
    }

    /***************************************************************
     * END All Ajax Functions
     ***************************************************************/

    /***************************************************************
     * BEGIN All Other Functions
     ***************************************************************/

    /**
     * we need to redraw the weather icons when the chart gets redrawn/resized
     */
    function redrawWeatherIcons(event) {
        /**
         * destroy all weather icons that exist inside the chart area before we draw new ones, then empty the array
         */
        _.forEach(weather_icons_array, function(point) {
            if (point) {
                point.destroy();
            }
        });

        weather_icons_array = [];

        /**
         * cycle through the data points to draw icons for those within the chart
         * first count the number of points that are actually in the visible part of the chart
         */
        var points_count_in_chart = _.countBy(event.target.series[1].points, function(point) {
            return point.isInside;
        });

        if (points_count_in_chart.true < 40) {
            /**
             * only process points that are inside the new chart area and only draw icon where we have less than
             * 40 data points. Otherwise the chart would become too crowded
             */
            _.forEach(event.target.series[1].points, function(point) {
                var file_name = '';

                if (point.isInside) {
                    /**
                     * here we translate the provided icon attribute to the actual file name we want to render
                     */
                    switch(point.icon) {
                        case 'clear-day':
                            file_name = 'f00d(59)_32';
                            break;
                        case 'night-clear':
                            file_name = 'f02e(12)_32';
                            break;
                        case 'rain':
                            file_name = 'f019(41)_32';
                            break;
                        case 'snow':
                            file_name = 'f01b(57)_32';
                            break;
                        case 'sleet':
                            file_name = 'f017(58)_32';
                            break;
                        case 'strong-wind':
                            file_name = 'f050(0)_32';
                            break;
                        case 'fog':
                            file_name = 'f021(29)_32';
                            break;
                        case 'cloudy':
                            file_name = 'f013(36)_32';
                            break;
                        case 'partly-cloudy-day':
                            file_name = 'f002(53)_32';
                            break;
                        case 'partly-cloudy-night':
                            file_name = 'f031(15)_32';
                            break;
                        case 'hail':
                            file_name = 'f015(38)_32';
                            break;
                        case 'thunderstorm':
                            file_name = 'f01e(30)_32';
                            break;
                        case 'tornado':
                            file_name = 'f056(1)_32';
                            break;
                        case 'wind':
                            file_name = 'f085(2)_32';
                            break;
                        default:
                            file_name = 'f00d(59)_32';
                    }

                    /**
                     * render the icon relative to the max temp point it is attached to
                     * first construct the icon, then render it to the canvas
                     *
                     * NOTE:
                     * we add the icon object to an array for later use (e.g. to remove the icons upon redraw of the chart)
                     */
                    weather_icons_array[point.index] = chart_3_1.renderer.image(
                        '{{site.uri.public}}/images/weather_icons_32x32/' + file_name + '.png',
                        point.plotX+20,
                        point.plotY-25,
                        30,
                        30
                    ).attr({
                        zIndex: 5
                    });

                    weather_icons_array[point.index].add();
                }
            });
        }
    }

    /***************************************************************
     * END All Other Functions
     ***************************************************************/

    /***************************************************************
     * BEGIN Setting Chart Variables
     ***************************************************************/

    /***************************************************************
     * start of new vs repeat pie chart
     * container: chart_1_2
     ***************************************************************/
    var chart_1_2_Options = {
        chart: {
            type: 'pie',
            renderTo: 'chart_1_2',
            backgroundColor: '#FFFFFF',
            plotBorderWidth: null,
            plotShadow: false,
            spacingTop: 0,
            spacingBottom: 0,
            spacingLeft: 0,
            spacingRight: 0
        },
        plotOptions: {
            pie: {
                innerSize: '65%',
                center: ['50%', '50%'],
                borderWidth: 0,
                allowPointSelect: false,
                cursor: false,
                showInLegend: true,
                point: {
                    events: {
                        legendItemClick: function () {
                            return false;
                        }
                    }
                }
            },
            series: {
                states: {
                    hover: {
                        enabled: false
                    }
                }
            }
        },
        legend: {
            align: 'right',
            verticalAlign: 'top',
            layout: 'vertical',
            floating: true,
            itemStyle: {
                fontSize: '16px'
            },
        },
        tooltip: {
            formatter: function () {
                var tooltipcontent = '<b>' + this.key + '</b><br>' + (Math.round(this.percentage*10))/10 + '% (' + this.y.toLocaleString() + ' of ' + this.total.toLocaleString() + ')';
                return tooltipcontent;
            }
        },
        title: {
            align: 'center',
            verticalAlign: 'middle',
            y: 10
        }
    };

    chart_1_2_Options.series = [{
        name: "visitors",
        data: [{
            name: "new users",
            y: 0,
            color: '#e25826'
        },
        {
            name: "repeat users",
            y: 0,
            color: '#132149'
        }]
    }];

    /**
     * initialize the chart
     */
    var chart_1_2 = new Highcharts.Chart(chart_1_2_Options);
    chart_1_2.showLoading();

    /***************************************************************
     * start of time of day chart
     * container: chart_3_1
     ***************************************************************/

    var chart_3_1_Options = {
        chart: {
            renderTo: 'chart_3_1',
            backgroundColor: '#FFFFFF',
            type: 'area'
        },
        xAxis: {
            type: 'category'
        },
        tooltip: {
            shared: true,
            formatter: function () {
                var tooltipcontent = '<b>Between ' + this.x + ':00 and ' + (this.x+1) + ':00</b>';
                // we have to loop here as we don't yet know how many series we will have
                $.each(this.points, function () {
                    tooltipcontent += '<br/>' + this.series.name + ': ' + this.y.toLocaleString();
                });

                return tooltipcontent;
            }
        },
        legend: {
            enabled: true
        }
    };

    /**
     * initialize the timeOfDay average chart
     */
    var chart_3_1 = new Highcharts.Chart(chart_3_1_Options);
    chart_3_1.showLoading();

    /***************************************************************
     * start of dwell time analysis chart
     * container: chart_3_2
     ***************************************************************/
    var chart_3_2_Options = dwell_time_analysis_options;
    chart_3_2_Options.chart.renderTo  = 'chart_3_2';
    chart_3_2_Options.xAxis.plotBands = weekends;

    /**
     * initialize the chart
     */
    var chart_3_2 = new Highcharts.Chart(chart_3_2_Options);
    chart_3_2.showLoading();

    /***************************************************************
     * start of top zones chart
     * container: chart_1_1 | chart_zones_hidden
     ***************************************************************/
    var chart_1_1_Options = {
        chart: {
            renderTo: 'chart_1_1',
            backgroundColor: '#FFFFFF'
        },
        plotOptions: {
            column: {
                borderWidth: 0
            },
            series: {
                maxPointWidth: 40,
                stacking: 'normal'
            }
        },
        legend: {
            enabled: false
        },
        xAxis: {
            type: 'category'
        },
        tooltip: {
            shared: true,
            useHTML: true,
            borderWidth: 0,
            backgroundColor: "rgba(255,255,255,0)",
            shadow: false,
            formatter: function () {
                var tooltipcontent = '<b>' + this.points[0].key + '</b>';
                tooltipcontent += '<table style="width:100%">';

                $.each(this.points, function () {
                    var symbol = '■';
                    tooltipcontent += '<tr><td><span style="color:' + this.point.color + '">' + symbol + '</span> ' + this.series.name + ':</td><td style="text-align: right;">' + this.y.toLocaleString() + '</td></tr>';
                });

                tooltipcontent += '</table>';
                return tooltipcontent;
            }
        }
    };

    /**
     * initialize the chart
     */
    var chart_1_1 = new Highcharts.Chart(chart_1_1_Options);
    chart_1_1.showLoading();

    /**
     * The options for the hidden zone chart used in the csv file
     */
    var chart_zones_hidden_Options = {
        chart: {
            renderTo: 'chart_zones_hidden',
            backgroundColor: '#FFFFFF'
        },
        plotOptions: {
            column: {
                borderWidth: 0
            },
            series: {
                maxPointWidth: 40,
                stacking: 'normal'
            }
        },
        legend: {
            enabled: false
        },
        xAxis: {
            type: 'category'
        }
    };

    /***************************************************************
     * END Setting Chart Variables
     ***************************************************************/

    /***************************************************************
     * BEGIN All other Ajax Requests
     ***************************************************************/

    /**
     * here we get the metrics (average visitors for multiple time units) for the top row donuts with ajax
     * - start off with the ajax function to get average visitor metrics
     */
    $.ajax({
        url:        '{{site.uri.public}}/elephantwifi/api/visitor_report/alltime_averages',
        type:       'GET',
        dataType:   'json',
        success:    onAvgVisitorMetricsReceived
    });

    /***************************************************************
     * END other Ajax Requests
     ***************************************************************/

    /***************************************************************
     * BEGIN daterangepicker from here
     ***************************************************************/

    /**
     * define $start and $end for most of the charts
     * and determine how far back do we go back to get clients stats
     * TODO:
     */
    var rangeEnd = moment().subtract(1, 'day').endOf('day');
    var rangeStart = moment().subtract(1, 'weeks').startOf('day');
    var rightNow = moment().subtract(1, 'day').endOf('day');

    /**
     * initiate the daterangepicker with initial start/end and Label
     */
    page_daterange(rangeStart, rangeEnd);

    /**
     * functions to display the "active" custom date range and the picker for current page
     * - assuming start of data collection is January 1st, 2015
     * TODO:
     * - consider a venue variable that holds the start date and is checked/updated when setting up
     */
    $('#dashboard-report-range').daterangepicker({
        timePicker:             true,
        timePicker24Hour:       true,
        timePickerIncrement:    60,
        showISOWeekNumbers:     true,
        locale: {
            format: 'DD/MM/YYYY',
            firstDay: 1
        },
        ranges: {
           'Yesterday': [moment().startOf('day').subtract(1, 'days'), moment().startOf('day')],
           'Past 7 days': [rangeStart, rangeEnd], //default value for the page
           'Last Week': [moment().subtract(1, 'weeks').startOf('week'), moment().startOf('week')],
           'Month to-date': [moment().startOf('month'), moment().startOf('day')],
           'Last Month': [moment().subtract(1, 'months').startOf('month').startOf('day'), moment().startOf('month').startOf('day')],
           'All Time': ['{{current_user.primaryVenue.venue_tracking.capture_start | date("d/m/Y", "Europe/London")}}', moment()]
        },
        startDate:   rangeStart,
        endDate:     rangeEnd,
        minDate:     '{{current_user.primaryVenue.venue_wifi.capture_start | date("d/m/Y", "Europe/London")}}',
        maxDate:     moment().subtract(1, 'day').endOf('day'),
        opens:       'left',
        applyClass:  'blue',
        cancelClass: 'red'
    }, page_daterange);

    /**
     * callback function to execute upon selected date range
     */
    function page_daterange(start, end) {
        console.log(start + ':' + end);
        /**
         * update these global variables for the daterangepicker and the ajax calls
         */
        rangeStart = start;
        rangeEnd = end;
        now = moment().valueOf();

        /**
         * historyhours is used to get stats for the users
         */
        var historyHours = Math.round((now - start)/(3600*1000));

        /**
         * enable spinners on the charts, <span>s and <div>s which will be updated
         */
        $('#span_total_visitors_this_period').html('<i class="fa fa-circle-o-notch fa-spin" style="font-size: 70%;"></i>');
        $('#span_busiest_time_of_day_this_period').html('<i class="fa fa-circle-o-notch fa-spin" style="font-size: 70%;"></i>');
        $('#span_average_dwell_time_this_period').html('<i class="fa fa-circle-o-notch fa-spin" style="font-size: 70%;"></i>');
        $('#span_average_visitors_per_day_this_period').html('<i class="fa fa-circle-o-notch fa-spin" style="font-size: 70%;"></i>');

        /**
         * place the selected range in the <span>s at the top of the page
         */
        $('#page_daterange_selected').html(start.format('dddd, D MMMM YYYY') + ' - ' + end.format('dddd, D MMMM YYYY'));
        $('#page_daterange_selected_small').html(start.format('D MMM YYYY') + ' - ' + end.format('D MMM YYYY'));

        var chart_1_1 = $("#chart_1_1").highcharts();
        var chart_1_2 = $("#chart_1_2").highcharts();
        var chart_3_1 = $("#chart_3_1").highcharts();
        var chart_3_2 = $("#chart_3_2").highcharts();
        var chart_4_1 = $("#chart_4_1").highcharts();

        chart_1_1.showLoading();
        chart_1_2.showLoading();
        chart_3_1.showLoading();
        chart_3_2.showLoading();
        chart_4_1.showLoading();

        $('#span_total_visitors_this_period').html('<i class="fa fa-spinner fa-spin"></i>');
        $('#span_busiest_time_of_day_this_period').html('<i class="fa fa-spinner fa-spin"></i>');
        $('#span_average_dwell_time_this_period').html('<i class="fa fa-spinner fa-spin"></i>');
        $('#span_average_visitors_per_day_this_period').html('<i class="fa fa-spinner fa-spin"></i>');

        /**
         * get the data for chart 1.2
         */
        $.ajax({
            url:        '{{site.uri.public}}/elephantwifi/api/visitor_report/new_vs_repeat/' + start + '/' + end,
            type:       'GET',
            dataType:   'json',
            success:    onChart_1_2_DataReceived
        });

        /**
         * get the data for chart 3.1
         */
        $.ajax({
            url:        '{{site.uri.public}}/elephantwifi/api/visitor_report/visitors_per_hourofday/' + start + '/' + end,
            type:       'GET',
            dataType:   'json',
            success:    chart_3_1_DataReceived
        });

        /**
         * get the data for chart 3.2
         */
        $.ajax({
            url:        '{{site.uri.public}}/elephantwifi/api/visitor_report/visitors_durations/' + start + '/' + end,
            type:       'GET',
            dataType:   'json',
            success:    onChart_3_2_DataReceived
        });

        /**
         * get the data for chart 1.1
         */
        $.ajax({
            url:        '{{site.uri.public}}/elephantwifi/api/visitor_report/busiest_zones/' + start + '/' + end,
            type:       'GET',
            dataType:   'json',
            success:    chart_1_1_DataReceived
        });

        /**
         * get the data for chart 4.1
         */
        $.ajax({
            url:        '{{site.uri.public}}/elephantwifi/api/stats/venue/connect_vs_internet_count/' + start + '/' + end,
            type:       'GET',
            dataType:   'json',
            success:    chart_4_1_DataReceived
        });
    }

    /***************************************************************
     * END of daterangepicker
     ***************************************************************/
});

</script>
{% endblock %}