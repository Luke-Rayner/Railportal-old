{% extends "pages/layouts/layout-dashboard.html.twig" %}

{% block page %}
    {% set page = page | merge({
        "title"       : "Dashboard",
        "description" : ""
    }) %}
    {{ parent() }}
{% endblock %}

{% block content %}
<div class="page-head">
    <div class="row text-center" style="display: none" id="pdf_title">
        <img src="{{site.uri.public}}/images/WiFi-Logo-Image-Blue.png" height="50px" width="50px" style="margin-top: 5px"/>
        <u><h1 class="bold">INTELLI-SENSE</h1></u>
    </div>

    <div class="page-title">
        <h1>{{page.title}}
            <small>{{page.description}}</small>
        </h1>
    </div>

    <button class="btn green-jungle pull-right" id="csv_button" aria-hidden="true" data-toggle="tooltip" data-placement="bottom" title="Download report data in CSV format">Excel Export</button>
    <button class="btn orange pull-right" style="margin-right: 5px" aria-hidden="true" onclick="genPDF();" data-toggle="tooltip" data-placement="bottom" title="Print this page.">Print Report</button>
    <button class="btn btn-warning pull-right" id="tour_btn"style="margin-right: 5px" aria-hidden="true" data-toggle="tooltip" data-placement="bottom" title="Start Tour">Start Page Tour</button>
    <span class="pull-right" style="margin-right: 20px"><h4><b>Venue Start Date - {{current_user.primaryVenue.venue_wifi.capture_start | date('d/m/Y', 'Europe/London')}}<b><h4></span>
</div>

<br>

<div class="row">
    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
        <a id="donut_container_1" class="dashboard-stat dashboard-stat-v2 blue-soft" href="#">
            <div class="visual">
                <i class="fas fa-users"></i>
            </div>
            <div class="details">
                <div class="number bold">
                    <span id="span_visitors_last_7_days"><i class="fa fa-circle-o-notch fa-spin" style="font-size: 70%;"></i></span>
                </div>
                <div class="desc"> Users, Last 7 days </div>
            </div>
        </a>
    </div>
    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
        <a id="donut_container_2" class="dashboard-stat dashboard-stat-v2 blue-soft" href="#">
            <div class="visual">
                <i class="fa fa-clock-o"></i>
            </div>
            <div class="details">
                <div class="number bold">
                    <span id="span_visitors_prev_7_days"><i class="fa fa-circle-o-notch fa-spin" style="font-size: 70%;"></i></span>
                </div>
                <div class="desc"> Users, Previous 7 days </div>
            </div>
        </a>
    </div>
    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
        <a id="donut_container_3" class="dashboard-stat dashboard-stat-v2 blue-soft" href="#">
            <div class="visual">
                <i class="fa fa-cloud-download"></i>
            </div>
            <div class="details">
                <div class="number bold">
                    <span id="span_avg_dwelltime"><i class="fa fa-circle-o-notch fa-spin" style="font-size: 70%;"></i></span>
                </div>
                <div class="desc"> Avg connection time, Today </div>
            </div>
        </a>
    </div>
    <div class="col-lg-3 col-md-3 col-sm-6 col-xs-12">
        <a id="donut_container_4" class="dashboard-stat dashboard-stat-v2 blue-soft" href="#">
            <div class="visual">
                <i class="fa fa-users"></i>
            </div>
            <div class="details">
                <div class="number bold">
                    <span id="span_today_new_repeat_counts"><i class="fa fa-circle-o-notch fa-spin" style="font-size: 70%;"></i></span>
                    </div>
                <div class="desc"> New / Repeat, Today </div>
            </div>
        </a>
    </div>
</div>
<div class="clearfix"></div>

<div class="row">
    <div class="col-lg-6 col-xs-12 col-sm-12">
        <div id="chart_container_1_1" class="portlet light bordered">
            <div class="portlet-title">
                <div class="caption ">
                    <span class="caption-subject font-blue-sharp bold">Browsers</span>
                    <span class="caption-helper">registered in last 30 days</span>
                </div>
                <div class="tools">
                    <i class="fas fa-question-circle info-icon"></i>
                    <a href="" class="collapse"> </a>
                    <a href="" class="fullscreen"> </a>
                </div>
            </div>
            <div class="portlet-body">
                <div id="chart_1_1" style="width: 100%; height: 200px; margin: 0 auto"></div>
            </div>
        </div>
    </div>
    <div class="col-lg-6 col-xs-12 col-sm-12">
        <div id="chart_container_1_2" class="portlet light bordered">
            <div class="portlet-title">
                <div class="caption ">
                    <span class="caption-subject font-blue-sharp bold">Connected Browsers</span>
                    <span class="caption-helper">users currently connected</span>
                </div>
                <div class="tools">
                    <i class="fas fa-question-circle info-icon"></i>
                    <a href="" class="collapse"> </a>
                    <a href="" class="fullscreen"> </a>
                </div>
            </div>
            <div class="portlet-body">
                <div id="chart_1_2" style="width: 100%; height: 200px; margin: 0 auto"></div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-lg-6 col-xs-12 col-sm-12">
        <div id="chart_container_2_1" class="portlet light bordered">
            <div class="portlet-title">
                <div class="caption ">
                    <span class="caption-subject font-blue-sharp bold">User Count per Day</span>
                    <span class="caption-helper">last 7 days vs previous 7 days</span>
                </div>
                <div class="tools">
                    <i class="fas fa-question-circle info-icon"></i>
                    <a href="" class="collapse"> </a>
                    <a href="" class="fullscreen"> </a>
                </div>
            </div>
            <div class="portlet-body">
                <div id="chart_2_1" style="width: 100%; height: 200px; margin: 0 auto"></div>
            </div>
        </div>
    </div>
    <div class="col-lg-6 col-xs-12 col-sm-12">
        <div id="chart_container_2_2" class="portlet light bordered">
            <div class="portlet-title">
                <div class="caption ">
                    <span class="caption-subject font-blue-sharp bold">Last 7 days Stats</span>
                    <span class="caption-helper">numbers of users per day for the last 7 days</span>
                </div>
                <div class="tools">
                    <i class="fas fa-question-circle info-icon"></i>
                    <a href="" class="collapse"> </a>
                    <a href="" class="fullscreen"> </a>
                </div>
            </div>
            <div class="portlet-body">
                <div id="chart_2_2" style="width: 100%; height: 200px; margin: 0 auto"></div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-lg-6 col-xs-12 col-sm-12">
        <div id="chart_container_3_1" class="portlet light bordered">
            <div class="portlet-title">
                <div class="caption ">
                    <span class="caption-subject font-blue-sharp bold">Browser Gender Breakdown</span>
                    <span class="caption-helper">number of males vs females last 30 days</span>
                </div>
                <div class="tools">
                    <i class="fas fa-question-circle info-icon"></i>
                    <a href="" class="collapse"> </a>
                    <a href="" class="fullscreen"> </a>
                </div>
            </div>
            <div class="portlet-body">
                <div id="chart_3_1" style="width: 100%; height: 200px; margin: 0 auto"></div>
            </div>
        </div>
    </div>
    <div class="col-lg-6 col-xs-12 col-sm-12">
        <div id="chart_container_3_2" class="portlet light bordered">
            <div class="portlet-title">
                <div class="caption ">
                    <span class="caption-subject font-blue-sharp bold">Browser Age Breakdown</span>
                    <span class="caption-helper">users age compared to gender last 30 days</span>
                </div>
                <div class="tools">
                    <i class="fas fa-question-circle info-icon"></i>
                    <a href="" class="collapse"> </a>
                    <a href="" class="fullscreen"> </a>
                </div>
            </div>
            <div class="portlet-body">
                <div id="chart_3_2" style="width: 100%; height: 200px; margin: 0 auto"></div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-lg-6 col-xs-12 col-sm-12">
        <div id="chart_container_4_1" class="portlet light bordered">
            <div class="portlet-title">
                <div class="caption ">
                    <span class="caption-subject font-blue-sharp bold">Average Browsers Per hour</span>
                    <span class="caption-helper">results taken from the last 7 days</span>
                </div>
                <div class="tools">
                    <i class="fas fa-question-circle info-icon"></i>
                    <a href="" class="collapse"> </a>
                    <a href="" class="fullscreen"> </a>
                </div>
            </div>
            <div class="portlet-body">
                <div id="chart_4_1" style="width: 100%; height: 200px; margin: 0 auto"></div>
            </div>
        </div>
    </div>
    <div class="col-lg-6 col-xs-12 col-sm-12">
        <div id="chart_container_4_2" class="portlet light bordered">
            <div class="portlet-title">
                <div class="caption ">
                    <span class="caption-subject font-blue-sharp bold">Connection Time Analysis</span>
                    <span class="caption-helper">for the venue over the last 7 days</span>
                </div>
                <div class="tools">
                    <i class="fas fa-question-circle info-icon"></i>
                    <a href="" class="collapse"> </a>
                    <a href="" class="fullscreen"> </a>
                </div>
            </div>
            <div class="portlet-body">
                <div id="chart_4_2" style="width: 100%; height: 200px; margin: 0 auto"></div>
            </div>
        </div>
    </div>
</div>

<div class="row text-center" style="display: none" id="pdf_url">
    website address: <a>www.elephantwifi.co.uk</a>
</div>
{% endblock %}

{% block page_scripts %}
<script type="text/javascript">
function genPDF() {
    var pdf_title = document.getElementById("pdf_title");
    if (pdf_title.style.display === "none") {
        pdf_title.style.display = "block";
    }

    var pdf_url = document.getElementById("pdf_url");
    if (pdf_url.style.display === "none") {
        pdf_url.style.display = "block";
    }

    var element = document.getElementsByClassName("page-content")[0];
    var opt = {
        margin:       1,
        filename:     'dashboard.pdf',
        image:        { type: 'jpeg', quality: 0.98 },
        html2canvas:  { scale: 1 },
        jsPDF:        { unit: 'pt', format: [1280, 720], orientation: 'l' }
    };

    html2pdf().set(opt).from(element).save();

    // Hide the element after 2 seconds allowing the screenshot to be taken while the element is shown
    window.setTimeout(hidePdfElements, 2000);
}

function hidePdfElements() {
    var pdf_title = document.getElementById("pdf_title");
    pdf_title.style.display = "none";

    var pdf_url = document.getElementById("pdf_url");
    pdf_url.style.display = "none";
}

/**
 * We use bootstrap tour for the helper info on each chart
 * Populate an array with all the information
 */
var chart_container_content = [];
chart_container_content['chart_container_1_1_title'] = 'Connection types.';
chart_container_content['chart_container_1_1_body']  = 'This shows the breakdown of how visitors are choosing to sign up during the last 30 days. Click on the columns for more detailed information.'; 

chart_container_content['chart_container_1_2_title'] = 'Connected users.'; 
chart_container_content['chart_container_1_2_body']  = 'This donut shows the number of people connected right now, split by Connected devices ( New or Repeat visitors who are not actively surfing the internet ) and Internet users ( New or Repeat visitors who are browsing the Internet right now ). The donut will automatically update every 30 seconds.'; 

chart_container_content['chart_container_2_1_title'] = 'Visitor count per day.'; 
chart_container_content['chart_container_2_1_body']  = 'This chart shows the total number of visitors on a daily basis whilst comparing the last 7 days ( orange bars ) against the previous 7 days ( blue bars ). Click on the key to disable either past or previous days.'; 

chart_container_content['chart_container_2_2_title'] = 'Last 7 days Stats.'; 
chart_container_content['chart_container_2_2_body']  = 'This pie chart shows the total number of users per day over the last 7 days. Hover over each segment for detailed information. Click on the segment to make it “pop” out or hover of the days of the week to highlight a segment.'; 

chart_container_content['chart_container_3_1_title'] = 'Gender breakdown.'; 
chart_container_content['chart_container_3_1_body']  = 'This chart shows the breakdown of visitors gender based on the number of connections during the last 30 days. Hover over the bar graph for a total figure. Connections are based on visitors that we have stored in our database and will include both connected devices and WiFi browsers.'; 

chart_container_content['chart_container_3_2_title'] = 'Age breakdown.'; 
chart_container_content['chart_container_3_2_body']  = 'This chart shows the breakdown of visitors age based on the number of connections during the last 30 days. Connections are based on visitors that we have stored in our database and will include both connected devices and WiFi browsers. Click on the key disable or enable any of the options.'; 

chart_container_content['chart_container_4_1_title'] = 'Avg. Visitors per Hour.'; 
chart_container_content['chart_container_4_1_body']  = 'This chart shows the average number of visitors per hour based on the last 7 days of connections. Connections are based on visitors that we have stored in our database and will include both connected devices and WiFi browsers. Hover over the chart for more information.'; 

chart_container_content['chart_container_4_2_title'] = 'Connection Time Analysis.'; 
chart_container_content['chart_container_4_2_body']  = 'This chart shows the number of connections on a daily basis during the last 7 days. Each colour represents a different time zone. The dashed light blue line is the average connection time i.e. the average of all time segments. Click on the key to enable or disable time segments. Hover over the chart for a more detailed view for each day. <5 mins is disabled by default as we deem these visitors as people passing through and not shoppers.';

// Start the tour
$('#tour_btn').click(function(e) {
    // Instance the tour
    var tour = new Tour({
        backdropPadding: 3,
        backdrop: true,
        steps: [{
            element: "#donut_container_1",
            title: "Visitors during last 7 days.",
            content: "This shows the number of visitors over the last 7 days up to midnight yesterday.",
            placement: "right"
        }, {
            element: "#donut_container_2",
            title: "Visitors during previous 7 days.",
            content: "This shows the number of visitors for the previous 7 days. i.e. the week before last.",
            placement: "right"
        }, {
            element: "#donut_container_3",
            title: "Average connection time.",
            content: "This shows the average time visitors are connected to the WiFi based on the last 7 days.",
            placement: "right"
        }, {
            element: "#donut_container_4",
            title: "New Vs Repeat.",
            content: "This shows the number of New visitors ( people that have never connected before ) compared to Repeat ( people already stored in our database ) for the last 7 days.",
            placement: "left"
        }, {
            element: "#chart_container_1_1",
            title: chart_container_content['chart_container_1_1_title'],
            content: chart_container_content['chart_container_1_1_body'],
            placement: "top"
        }, {
            element: "#chart_container_1_2",
            title: chart_container_content['chart_container_1_2_title'],
            content: chart_container_content['chart_container_1_2_body'],
            placement: "left"
        }, {
            element: "#chart_container_2_1",
            title: chart_container_content['chart_container_2_1_title'],
            content: chart_container_content['chart_container_2_1_body'],
            placement: "top"
        }, {
            element: "#chart_container_2_2",
            title: chart_container_content['chart_container_2_2_title'],
            content: chart_container_content['chart_container_2_2_body'],
            placement: "top"
        }, {
            element: "#chart_container_3_1",
            title: chart_container_content['chart_container_3_1_title'],
            content: chart_container_content['chart_container_3_1_body'],
            placement: "top"
        }, {
            element: "#chart_container_3_2",
            title: chart_container_content['chart_container_3_2_title'],
            content: chart_container_content['chart_container_3_2_body'],
            placement: "top"
        }, {
            element: "#chart_container_4_1",
            title: chart_container_content['chart_container_4_1_title'],
            content: chart_container_content['chart_container_4_1_body'],
            placement: "top"
        }, {
            element: "#chart_container_4_2",
            title: chart_container_content['chart_container_4_2_title'],
            content: chart_container_content['chart_container_4_2_body'],
            placement: "top"
        }
    ]});

    // Initialize the tour
    tour.init();
    tour.restart();
});

// When info icon is clicked display chart helper
$('.info-icon').click(function(e) {
    var element = $(this).parent().parent().parent().attr('id');

    // Instance the tour
    var tour = new Tour({
        template: "<div class='popover tour'><div class='arrow'></div><h3 class='popover-title'></h3><div class='popover-content'></div><div class='popover-navigation'><button class='btn btn-sm btn-default' data-role='end'>Close</button></div></div>",
        backdropPadding: 3,
        backdrop: true,
        steps: [{
            element: '#' + element,
            title: chart_container_content[element + '_title'],
            content: chart_container_content[element + '_body'],
            placement: "top"
        }
    ]});

    // Initialize the tour
    tour.init();
    tour.restart();
});

/**
 * file name and report title for CSV download
 */
var csv_filename = 'Dashboard_Report.csv';
var csv_title = '';
var venue_name = '{{user.venue_name}}';

/**
 * respond to click on the CSV download button
 */
$('#csv_button').on('click', function() {
    /**
     * initialise the arrays to append results to for download in CSV format
     */
    var csv_data = [];

    /**
     * update export title to reflect selected range
     */
    var csv_title = 'ElephantWiFi: Dashboard ({{user.venue_name}})';

    /**
     * get the data from the charts
     */
    csv_data.push({
        heading: 'Overall metrics',
        process: true,
        data: [['Visitors, Last 7 days', 'Visitors, Previous 7 days', 'Avg dwell time, Today', 'New / Repeat, Today', 'Online user count'],
               [
                    $('#span_visitors_last_7_days').text().replace(/,/g , ''),
                    $('#span_visitors_prev_7_days').text().replace(/,/g , ''),
                    $('#span_avg_dwelltime').text().replace(/,/g , ''),
                    $('#span_today_new_repeat_counts').text().replace(/,/g , ''),
                    $('#span_online_users').text().replace(/,/g , '')
               ]]
               // when process is true there must be at least two arrays (lines) of content: headers and data
    });

    csv_data.push({
        heading: 'WiFi Users - registered in last 30 days',
        process: false,
        data: $('#chart_1_1').highcharts().getCSV() // when process is false we just push the output from Highcharts
    });

    csv_data.push({
        heading: 'Visitor Count per Day - last 7 days vs previous 7 days',
        process: false,
        data: $('#chart_2_1').highcharts().getCSV() // when process is false we just push the output from Highcharts
    });

    csv_data.push({
        heading: 'Last 7 days Stats - Unique users per day for last 7 days',
        process: false,
        data: $('#chart_2_2').highcharts().getCSV() // when process is false we just push the output from Highcharts
    });

    csv_data.push({
        heading: 'WiFi User Age Breakdown - number of males vs females last 30 days',
        process: false,
        data: $('#chart_3_1').highcharts().getCSV() // when process is false we just push the output from Highcharts
    });

    csv_data.push({
        heading: 'WiFi User Age Breakdown - users age compared to gender last 30 days',
        process: false,
        data: $('#chart_3_2').highcharts().getCSV() // when process is false we just push the output from Highcharts
    });

    // csv_data.push({
    //     heading: 'Average Visitors Per Hour - last 30 days',
    //     process: false,
    //     data: $('#chart_4_1').highcharts().getCSV() // when process is false we just push the output from Highcharts
    // });

    csv_data.push({
        heading: 'Dwell Time Analysis - time visitors stayed in an area over the last 7 days',
        process: false,
        data: $('#chart_4_2').highcharts().getCSV() // when process is false we just push the output from Highcharts
    });

    exportToCsv(csv_filename, csv_title, venue_name, csv_data);

    csv_data = [];
});

// Alert var
var alert_notifications = '{{alert_notifications | raw}}';

var now = moment().valueOf();
var startToday = moment().startOf('day');
var yesterday = moment(now).subtract(1, 'day');
var previous7daysRangeStart = moment(startToday).subtract(7, 'days');
var previous14daysRangeStart = moment(startToday).subtract(14, 'days');
var previous30daysRangeStart = moment(startToday).subtract(30, 'days');

/**
 * calculate weekends for plotbands
 */
var seriesStart = startToday - (300000*24*365);
var weekends = weekendAreas(seriesStart, startToday);
var weekendsDaily = weekendAreasDaily4Columns(seriesStart, startToday);

$(document).ready(function() {
    /**
     * Show the logon alerts
     */
    {% for alert in page.alerts %}
        /**
         * here we cycle through any alerts we may have and create a toastr message for each
         */
        var alert_type = '{{alert.type}}';
        var alert_message = '{{alert.message}}';

        if (alert_type == 'login'){
            /**
             * here we define the options for the login motification
             */
            $.each(alert_notifications, function() {
                var alert_link      = this.link;
                var alert_file_uuid = this.file_uuid;
                var alert_file_name = this.file_name;


                toastr.options = {
                    "closeButton": true,
                    "debug": false,
                    "newestOnTop": false,
                    "progressBar": false,
                    "positionClass": "toast-" + this.position,
                    "preventDuplicates": false,
                    "onclick": null,
                    "showDuration": "300",
                    "hideDuration": "1000",
                    "timeOut": 0,
                    "extendedTimeOut": 0,
                    "showEasing": "swing",
                    "hideEasing": "linear",
                    "showMethod": "fadeIn",
                    "hideMethod": "fadeOut",
                    "tapToDismiss": false
                }

                if (alert_link != '') {
                    toastr.options.onclick = function() { 
                        $('.toast .toast-close-button').focus();
                        var newTab = window.open(alert_link, '_blank');
                        newTab.focus();
                    }
                }
                else if (alert_file_uuid != '' && alert_file_name != '') {
                    toastr.options.onclick = function() { 
                        $('.toast .toast-close-button').focus();
                        var newTab = window.open('{{site.uri.public}}/uploaded_files/alert_notifications/pdf/' + alert_file_uuid + '/' + alert_file_name, '_blank');
                        newTab.focus();
                    }
                }
                else {
                    toastr.options.onclick = function() {}
                } 
            
                toastr[this.type](this.message, this.title);
            });

            toastr.options.onclick = function() {}
            toastr['success'](alert_message);
        } else if (alert_type == 'success'){
            toastr['success'](alert_message);
        } else if (alert_type == 'warning'){
            toastr['warning'](alert_message);
        } else  if (alert_type == 'info'){
            toastr['info'](alert_message);
        } else if (alert_type == 'danger'){
            toastr['error'](alert_message);
        }
    {% endfor %}

    /***************************************************************
     * start functions which are called from the ajax requests
     ***************************************************************/

    function onVisitorConnectionDataReceived(data) {
        /**
         * determine new versus repeat users
         * - declare some variables first
         * - then derive the total number of users from our unique sessions
         */
         
        var new_users = 0;
        var returning_users = 0;
        var user_count = data.count_filtered;

        /**
         * find new users then determine returning user count
         */
        new_users = _.filter(data.rows, function(o) {
            return (o.first_seen * 1000) > startToday;
        });

        returning_users = user_count - new_users.length;

        $('#span_today_new_repeat_counts').html(new_users.length.toLocaleString() + ' / ' + returning_users.toLocaleString());
    }

    /**
     * Push the received dwelltime data to the page
     */
    function onAvgDwelltimeDataReceived(data) {
        var average_dwelltime = _.meanBy(data, function(o) { return o.duration; });

        /**
         * Push the metric to the correct <span>
         */
        $('#span_avg_dwelltime').html(Math.round(moment.duration(average_dwelltime, 'seconds').asMinutes()) + ' minutes');
    }

    function onVisitorCountsDataReceived(data) {
        last_7_days_data = [];
        prev_7_days_data = [];
        last_7_days      = [];
        prev_7_days      = [];

        chart_2_1_ChartOptions.plotOptions = {
            series: {
                dataLabels : {
                    useHTML: true,
                    enabled: true,
                    align: 'center',
                    verticalAlign: 'top',
                    formatter: function () {
                        var day_epoch = this.point.day_epoch;
                        console.log(day_epoch);
                        var event = '';
                        var event_categories = [];
                        $.each(data.event, function(key, value) {
                            if (day_epoch >= value['start_date'] && day_epoch <= value['end_date']) {
                                if (event_categories.length == 0) {
                                    event = `<span padding-top: 20px;><i style="background-color:` + value['color'] + `" class="circle-icon fa fa-calendar"></i></span>`;
                                    event_categories.push(value['category_id']); 
                                }

                                if ($.inArray(value['category_id'], event_categories) == -1) {
                                    event += `<br><span><i style="background-color:` + value['color'] + `" class="circle-icon fa fa-calendar fa-sm"></i></span>`;
                                    event_categories.push(value['category_id']); 
                                }
                            }
                        });
                        return event;
                    }
                }
            }
        }

        chart_2_1_ChartOptions.tooltip = {
            shared: true,
            useHTML: true,
            borderWidth: 0,
            backgroundColor: "rgba(255,255,255,0)",
            shadow: false,
            formatter: function () {
                var tooltipcontent = '<b>' + this.points[0].key + '</b>';

                if (typeof this.points[1] !== 'undefined') {
                    var day_epoch  = this.points[1].point.day_epoch;
                    $.each(data.event, function(key, value) {
                        if (day_epoch >= value['start_date'] && day_epoch <= value['end_date']) {
                            tooltipcontent += '<p><b>Event: </b>' + value['name'] + ' (' + moment(day_epoch).format('DD/MM/YYYY') + ')</p>';
                        }
                    });
                }

                if (typeof this.points[0] !== 'undefined') {
                    var day_epoch  = this.points[0].point.day_epoch;
                    $.each(data.event, function(key, value) {
                        if (day_epoch >= value['start_date'] && day_epoch <= value['end_date']) {
                            tooltipcontent += '<p><b>Event: </b>' + value['name'] + ' (' + moment(day_epoch).format('DD/MM/YYYY') + ')</p>';
                        }
                    });
                }

                tooltipcontent += '<table style="width:100%">';

                /**
                 * we loop through the value for the two series
                 */
                $.each(this.points, function () {
                    if (typeof this !== 'undefined') {
                        symbol = '■';
                        tooltipcontent += '<tr><td><span style="color:' + this.point.color + '">' + symbol + '</span> ' + this.series.name + ':</td><td style="text-align: right;">' + this.y.toLocaleString() + '</td></tr>';
                    }
                });

                if ((typeof this.points[1] !== 'undefined') && (typeof this.points[0] !== 'undefined') && (typeof this.points[1].y !== 'undefined') && (typeof this.points[0].y !== 'undefined')) {
                    /**
                     * only when we have two series for this category we display the change between the two values, then close the table and return the tooltip
                     */
                    var change = (this.points[1].y - this.points[0].y)/this.points[0].y;
                    if (change >= 0 ) {
                        tooltipcontent += '<tr><td><b>Change:</b></td><td style="text-align: right; color: #66B366"><b>+' + (Math.round(change*1000)/10).toLocaleString() + '%</b></td></tr>';
                    } else {
                        tooltipcontent += '<tr><td><b>Change:</b></td><td style="text-align: right; color: #DD686E"><b>' + (Math.round(change*1000)/10).toLocaleString() + '%</b></td></tr>';
                    }
                }

                tooltipcontent += '</table>';
                return tooltipcontent;
            }
        }

        _.forEach(data.rows, function(count) {
            if (count.day_epoch >= previous7daysRangeStart / 1000) {
                last_7_days.push(count.has_authorised_device_uuid);
                last_7_days_data.push(count);
            }
            else {
                prev_7_days.push(count.has_authorised_device_uuid);
                prev_7_days_data.push(count);
            }
        });

        if (last_7_days.length != 0) {
            last_7_days_count = last_7_days.reduce(function(a, b) { return a + b; })
        } else {
            last_7_days_count = 0;
        }

        if (prev_7_days.length != 0) {
            prev_7_days_count = prev_7_days.reduce(function(a, b) { return a + b; })
        } else {
            prev_7_days_count = 0;
        }

        $('#span_visitors_last_7_days').html(last_7_days_count.toLocaleString() + ' visitors');
        $('#span_visitors_prev_7_days').html(prev_7_days_count.toLocaleString() + ' visitors');

        /**
         * sort the days of the week up to yesterday
         */
        var daysOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
        var today      = new Date().getDay();
        for (var i=0;i<today;i++) daysOfWeek.push(daysOfWeek.shift());

        function daysOfWeekSorter(x,y) {
            return daysOfWeek.indexOf(x[0])-daysOfWeek.indexOf(y[0]);
        }

        last_7_days_data.sort(daysOfWeekSorter);
        prev_7_days_data.sort(daysOfWeekSorter);

        /**
         * set the options for the series
         */
        var seriesoptions = [
            {
                color: '#001E4C', // dark blue
                name:  'previous 7 days'
            },
            {
                color: '#e25826', // orange
                name:  'last 7 days'
            }
        ];

        chart_2_1_ChartOptions.series = seriesoptions;
        var weekdaysChart           = new Highcharts.Chart(chart_2_1_ChartOptions);

        
        var weekDaysLast7Days =[];
        for (var ln = 0; ln < last_7_days_data.length; ln++) {
            var item = {
                'name':      last_7_days_data[ln]['day_of_week'],
                'y':         last_7_days_data[ln]['has_authorised_device_uuid'],
                'day_epoch': last_7_days_data[ln]['day_epoch'] * 1000,
            };
            weekDaysLast7Days.push(item);
        }

        var weekDaysPrev7Days =[];
        for (var ln = 0; ln < prev_7_days_data.length; ln++) {
            var item = {
                'name':      prev_7_days_data[ln]['day_of_week'],
                'y':         prev_7_days_data[ln]['has_authorised_device_uuid'],
                'day_epoch': prev_7_days_data[ln]['day_epoch'] * 1000,
            };
            weekDaysPrev7Days.push(item);
        }

        /**
         * only populate the chart series if we have results
         */
        if (last_7_days_data.length > 0) {
            weekdaysChart.series[1].setData(weekDaysLast7Days);
        }

        if (prev_7_days_data.length > 0) {
            weekdaysChart.series[0].setData(weekDaysPrev7Days);
        }        

        /**
         * here we feed the pie chart showing breakdown per week day over the last 7 days
         */
        var pieChart = $('#chart_2_2').highcharts();
        pieChart.series[0].setData(weekDaysLast7Days);
        pieChart.hideLoading();
    }

    function ontimeOfDayDataReceived(series) {
        /**
         * Load all the data for the charts
         */
        data = series;

        /**
         * do something with the data
         */
        var seriesoptions = [
            {
                type:  'area',
                color: '#e25826',
                name:  'average visitors'
            }
        ];

        timeOfDayChartOptions.series = seriesoptions;
        timeOfDayChart               = new Highcharts.Chart(timeOfDayChartOptions);
        timeOfDayChart.series[0].setData(data);
    }

    function onDurationsDataReceived(data) {
        /**
         * define the series received
         */
        var seriesoptions = [
            {
                type: 'line',
                name: 'average dwelltime',
                yAxis: 1,
                color: '#C6D4FC',
                dashStyle: 'LongDash'
            },
            {
                type: 'area',
                name: '{{current_user.primaryVenue.dt_level_5_label}}',
                color: '#949898'
            },
            {
                type: 'area',
                name: '{{current_user.primaryVenue.dt_level_4_label}}',
                color: '#5A5A5A'
            },
            {
                type: 'area',
                name: '{{current_user.primaryVenue.dt_level_3_label}}',
                color: '#6EB553'
            },
            {
                type: 'area',
                name: '{{current_user.primaryVenue.dt_level_2_label}}',
                color: '#4E5977'
            },
            {
                type: 'area',
                name: '{{current_user.primaryVenue.dt_level_1_label}}',
                color: '#E9825C'
            },
            {
                type: 'area',
                name: '{{current_user.primaryVenue.dt_skipped_label}}',
                visible: false,
                color: '#DD686E' // otherwise this becomes purple
            }
        ];

        /**
         * if our date range is longer than 2 days, we disable the markers for clean lines
         * if shorter we switch to a stacked column chart
         */
        if (data['dt_level_1'].length > 2) {
            durationsChartOptions.plotOptions.series.marker.enabled = false;
        } else {
            durationsChartOptions.plotOptions.series.marker.enabled = true;

            $.each(seriesoptions, function () {
                if (this.type == 'area') {
                    this.type = 'column';
                }
            });
        }

        durationsChartOptions.series = seriesoptions;
        durationsChart = new Highcharts.Chart(durationsChartOptions);
        durationsChart.series[6].setData(noGapsDataArray(data['dt_skipped'], 86400));
        durationsChart.series[5].setData(noGapsDataArray(data['dt_level_1'], 86400));
        durationsChart.series[4].setData(noGapsDataArray(data['dt_level_2'], 86400));
        durationsChart.series[3].setData(noGapsDataArray(data['dt_level_3'], 86400));
        durationsChart.series[2].setData(noGapsDataArray(data['dt_level_4'], 86400));
        durationsChart.series[1].setData(noGapsDataArray(data['dt_level_5'], 86400));
        durationsChart.series[0].setData(noGapsDataArray(data['dt_average'], 86400));
    }

    /**
     * Push a selection of metrics to the boxes at the top of the dashboard
     * start with currenct connected users
     */
    function onSiteHealthMetricsReceived(data) {
        var authorised_count = _.filter(data, {'authorized' : true});
        var unauthorised_count = _.filter(data, {'authorized' : false});

        // /**
        //  * Push the metric to the correct <span>
        //  */
        // $('#span_online_users').html(wlan_data[0].num_guest.toLocaleString());

        var liveCount = [];
        liveCount.push(authorised_count.length, unauthorised_count.length);

        total = liveCount[0] + liveCount[1];

        chart_1_2_Options.title.text = '<b style="font-size: ' + 150 + '%; font-weight: bold; color: black;">' + total + '</b><br><b style="font-size: ' + 80 + '%;">Total</b>';
        var chart_1_2 = new Highcharts.Chart(chart_1_2_Options);
        chart_1_2.series[0].setData(liveCount);
        chart_1_2.hideLoading();
    }

    function onProviderIdentityCountDataReceived(data) {

        var seriesoptions = [
            {
                color: '#e25826',
                name: 'users'
            }
        ];

        providerIdentityChartOptions.series = seriesoptions;
        providerIdentityChart               = new Highcharts.Chart(providerIdentityChartOptions);

        var providersCount =[];
        for (var ln = 0; ln < data.rows.length; ln++) {
            if (data.rows[ln]['provider'] == '') {
                data.rows[ln]['provider'] = 'Registration Form';
            }

            data.rows[ln]['provider'] = convertUpperCase(data.rows[ln]['provider']);

            switch(data.rows[ln]['provider']) {
                case 'Facebook':
                    var color = '#3b5998';
                    break;
                case 'Twitter':
                    var color = '#00aced'
                    break;
                case 'Google':
                    var color = '#dd4b39'
                    break;
                case 'Instagram':
                    var color = '#e95950'
                    break;
                case 'Linkedin':
                    var color = '#007bb5'
                    break;
                default:
                    var color = '#e25826'
            }

            var item = {
                'name':  data.rows[ln]['provider'],
                'y':     data.rows[ln]['count'],
                'color': color
            };
            providersCount.push(item);
        }

        providerIdentityChart.series[0].setData(providersCount);
    }

    function onGenderCountDataReceived(data) {

        var seriesoptions = [
            {
                color: '#e25826',
                name: 'users'
            }
        ];

        chart_3_1_ChartOptions.series = seriesoptions;
        genderChart               = new Highcharts.Chart(chart_3_1_ChartOptions);

        var genderCount =[];
        for (var ln = 0; ln < data.length; ln++) {

            switch(data[ln]['gender']) {
                case 'Male':
                    var color = '#2C3A62';
                    break;
                case 'Female':
                    var color = '#e25826'
                    break;
                default:
                    var color = '#D3D3D3'
            }

            var item = {
                'name':  data[ln]['gender'],
                'y':     data[ln]['count'],
                'color': color
            };
            genderCount.push(item);
        }

        genderChart.series[0].setData(genderCount);
    }

    function onGenderCompareAgeCountDataReceived(data) {

        /**
         * do something with the data
         */
        var seriesoptions = [
            {
                type: 'column', // default chart type
                lineWidth: 2,
                states: {
                    hover: {
                        enabled: true,
                        lineWidth: 2
                    }
                },
                color: '#2C3A62',
                name: 'Males',
                stack: 'visitors'
            },
            {
                type: 'column', // default chart type
                lineWidth: 2,
                states: {
                    hover: {
                        enabled: true,
                        lineWidth: 2
                    }
                },
                color: '#e25826',
                name: 'Females',
                stack: 'visitors'
            },
            {
                type: 'column', // default chart type
                lineWidth: 2,
                states: {
                    hover: {
                        enabled: true,
                        lineWidth: 2
                    }
                },
                color: '#add8e6',
                name: 'Undisclosed',
                stack: 'visitors'
            }
        ];

        // Only 13+ year olds are allowed on the wifi so show that as the lowest number.
        for (var ln = 0; ln < data.length; ln++) {
            if(data[ln][0] == '10-20')
                data[ln][0] = '13-20'
        }

        var maleAgeCount = [];
        for (var ln = 0; ln < data.length; ln++) {
            maleAgeCount.push([data[ln][0], data[ln][1]]);
        }

        var femaleAgeCount = [];
        for (var ln = 0; ln < data.length; ln++) {
            femaleAgeCount.push([data[ln][0], data[ln][2]]);
        }

        var undisclosedAgeCount = [];
        for (var ln = 0; ln < data.length; ln++) {
            undisclosedAgeCount.push([data[ln][0], data[ln][3]]);
        }

        genderCompareAgeChartOptions.series = seriesoptions;
        var genderCompareAge = new Highcharts.Chart(genderCompareAgeChartOptions);
        genderCompareAge.series[0].setData(noGapsDataArray(maleAgeCount, 86400));
        genderCompareAge.series[1].setData(noGapsDataArray(femaleAgeCount, 86400));
        genderCompareAge.series[2].setData(noGapsDataArray(undisclosedAgeCount, 86400));
    }

    function chart_4_1_DataReceived(series) {

        data = series;
        
        /**
         * do something with the data
         */
        var seriesoptions = [
            {
                type: 'area',
                color: '#e25826', // e25826
                name: 'average browsers'
            }
        ];

        chart_4_1_Options.series = seriesoptions;
        chart_4_1 = new Highcharts.Chart(chart_4_1_Options);
        chart_4_1.series[0].setData(data);

        /**
         * here we also get the busiest hour and send that to donut 4
         */
        var hours = _.sortBy(data, function(value, key) {
            return value[1];
        });

        if (hours.length > 0) {
            $('#span_busiest_time_of_day_this_period').html((_.last(hours)[0]) + ':00 - ' + (_.last(hours)[0] + 1) + ':00');
        } else {
            $('#span_busiest_time_of_day_this_period').html('<span style="font-size: 60%;">no data</span>');
        }
    }

    /***************************************************************
     * end functions which are called from the ajax requests
     ***************************************************************/



    /***************************************************************
     * start preparations for the individual charts from here
     ***************************************************************/

    /***************************************************************
     * start of weekdays piechart
     ***************************************************************/
    var totalText = null;
    var weekdaysPieChartOptions = {
        chart: {
            renderTo:        'chart_2_2',
            type:            'pie',
            backgroundColor: '#FFFFFF',
            plotBorderWidth: null,
            plotShadow:      false,
            spacingTop:      5,
            spacingBottom:   5,
            spacingLeft:     5,
            spacingRight:    5
        },
        legend: {
            align:         'right',
            verticalAlign: 'top',
            layout:        'vertical',
            itemStyle: {
                fontSize: '13px'
            }
        },
        tooltip: {
            formatter: function () {
                var tooltipcontent = '<b>' + this.key + '</b><br>' + (Math.round(this.percentage*10))/10 + '% (' + this.y.toLocaleString() + ' of ' + this.total.toLocaleString() + ')';
                return tooltipcontent;
            }
        },
        plotOptions: {
            pie: {
                borderWidth:      1,
                allowPointSelect: true,
                showInLegend:     true,
                dataLabels: {
                    enabled: false,
                },
                point: {
                    events: {
                        legendItemClick: function () {
                            return false;
                        }
                    }
                },
            showInLegend: true
            }
        },
        series: [{
            name:         'Unique visitors',
            colorByPoint: true,
            data:         []
        }]
    };

    /**
     * initialize the weekdays pie chart
     */
    var weekdaysPieChart = new Highcharts.Chart(weekdaysPieChartOptions);
    weekdaysPieChart.showLoading();

    /***************************************************************
     * start of live count piechart
     ***************************************************************/
    var chart_1_2_Options = {
        chart: {
            type: 'pie',
            renderTo: 'chart_1_2',
            backgroundColor: '#FFFFFF',
            plotBorderWidth: null,
            plotShadow: false,
            spacingTop: 0,
            spacingBottom: 0,
            spacingLeft: 0,
            spacingRight: 0
        },
        plotOptions: {
            pie: {
                innerSize: '65%',
                center: ['50%', '50%'],
                borderWidth: 0,
                allowPointSelect: false,
                cursor: false,
                showInLegend: true,
                point: {
                    events: {
                        legendItemClick: function () {
                            return false;
                        }
                    }
                }
            },
            series: {
                states: {
                    hover: {
                        enabled: false
                    }
                }
            }
        },
        legend: {
            align: 'right',
            verticalAlign: 'top',
            layout: 'vertical',
            floating: true,
            itemStyle: {
                fontSize: '16px'
            },
            labelFormatter: function () {
                return this.name + ' - <b>' + this.y.toLocaleString() + '</b>';
            }
        },
        tooltip: {
            formatter: function () {
                var tooltipcontent = '<b>' + this.key + '</b><br>' + (Math.round(this.percentage*10))/10 + '% (' + this.y.toLocaleString() + ' of ' + this.total.toLocaleString() + ')';
                return tooltipcontent;
            }
        },
        title: {
            align: 'center',
            verticalAlign: 'middle',
            y: 10
        }
    };

    chart_1_2_Options.series = [{
        name: "visitors",
        data: [{
            name: "Browser(s)",
            y: 0,
            color: '#e25826'
        },
        {
            name: "User(s)",
            y: 0,
            color: '#132149'
        }]
    }];

    /**
     * initialize the chart
     */
    var chart_1_2 = new Highcharts.Chart(chart_1_2_Options);
    chart_1_2.showLoading();

    /***************************************************************
     * start of weekdays compared chart
     * container: chart_2_1
     ***************************************************************/
    var chart_2_1_ChartOptions = {
        chart: {
            renderTo:        'chart_2_1',
            backgroundColor: '#FFFFFF',
            type:            'column'
        },
        xAxis: {
            type: 'category'
        },
        plotOptions: {
            area: {
                marker: {
                    enabled: false,
                    symbol:  'circle',
                    radius:  2,
                    states: {
                        hover: {
                            enabled: true
                        }
                    }
                }
            }
        },
        legend: {
            enabled: true
        }
    };

    /**
     * initialize the weekdays compared chart
     * weekRangeEnd and weekRangeStart mark start and end of the most recent week
     * the previous week before this week, will be determined automatically
     */
    var weekdaysChart = new Highcharts.Chart(chart_2_1_ChartOptions);
    weekdaysChart.showLoading();

    /***************************************************************
     * start of dwell time analysis chart
     * container: chart_4_2
     ***************************************************************/
    /**
     * definition of the options for the Dwelltime analysis charts across the portal pages, where used
     */
    var dwell_time_analysis_options = {
        chart: {
            type: 'area'
        },
        xAxis: {
            type: 'datetime'
        },
        yAxis: [{
        }, {
            opposite: true,
            min:      0,
            labels: {
                formatter: function() {
                    return moment.duration(this.value, 'minutes').format('H [h] m [m]');
                }
            }
        }],
        tooltip: {
            shared:    true,
            useHTML:   true,
            formatter: function () {
                var tooltipcontent = '<b>' + moment(this.x).format("dddd, D MMMM YYYY") + '</b>';
                var tooltipfooter = '';
                var mySum          = 0;
                tooltipcontent    += '<table style="width: 100%;">';

                /**
                 * we have to loop here as we don't yet know how many series we will have
                 */
                $.each(this.points, function () {
                    var symbol     = '■';
                    var avg_suffix = '';
                    if (this.series.name == 'average dwelltime') {
                        tooltipfooter += '<tr><td><br><span style="color:' + this.point.color + '">' + symbol + '</span> '
                                          + this.series.name + ':</td><td style="text-align: right;"><br>' + moment.duration(this.y, 'minutes').format('H [h] m [m]') + '</td></tr>';
                    } else {
                        tooltipcontent += '<tr><td><span style="color:' + this.point.color + '">' + symbol + '</span> '
                                          + this.series.name + ':</td><td style="text-align: right;">' + this.y.toLocaleString() + '</td></tr>';
                        mySum += this.y;
                    }

                });

                tooltipcontent += '<tr><td><b>Total:</b></td><td style="text-align: right;"><b>' + mySum.toLocaleString() + '</b><td></tr>';
                tooltipcontent += tooltipfooter;
                tooltipcontent += '</table>';
                return tooltipcontent;
            }
        },
        plotOptions: {
            line: {
                pointPlacement: 'between'
            },
            area: {
                stacking:  'normal',
                lineWidth: 1,
                marker: {
                    lineWidth: 1
                }
            },
            column: {
                borderWidth: 0,
                stacking:    'normal'
            },
            series: {
                marker: {
                    enabled: null,
                    symbol:  'circle',
                    radius:  2,
                    states: {
                        hover: {
                            enabled: true
                        }
                    }
                }
            }
        },
        legend: {
            enabled: true,
            reversed: true
        }
    };

    var durationsChartOptions = dwell_time_analysis_options;
    dwell_time_analysis_options.chart.renderTo = 'chart_4_2';
    dwell_time_analysis_options.xAxis.plotBands = weekendsDaily;
    dwell_time_analysis_options.xAxis.labels = {
        format: '{value:%A}'
    };

    /**
     * initialize the durations chart
     */
    var durationsChart = new Highcharts.Chart(durationsChartOptions);
    durationsChart.showLoading();

    /***************************************************************
     * start of providerIdentity count chart
     * container: chart_1_1
     ***************************************************************/
    var providerIdentityChartOptions = {
        chart: {
            renderTo:        'chart_1_1',
            backgroundColor: '#FFFFFF',
            type:            'column'
        },
        xAxis: {
            type: 'category'
        },
        plotOptions: {
            area: {
                marker: {
                    enabled: false,
                    symbol:  'circle',
                    radius:  2,
                    states: {
                        hover: {
                            enabled: true
                        }
                    }
                }
            }
        },
        legend: {
            enabled: true
        }
    };

    /**
     * initialize the providerIdentity count chart
     */
    var providerIdentityChart = new Highcharts.Chart(providerIdentityChartOptions);
    providerIdentityChart.showLoading();

    /***************************************************************
     * start of providerIdentity count chart
     * container: chart_3_1
     ***************************************************************/
    var chart_3_1_ChartOptions = {
        chart: {
            renderTo:        'chart_3_1',
            backgroundColor: '#FFFFFF',
            type:            'column'
        },
        xAxis: {
            type: 'category'
        },
        plotOptions: {
            area: {
                marker: {
                    enabled: false,
                    symbol:  'circle',
                    radius:  2,
                    states: {
                        hover: {
                            enabled: true
                        }
                    }
                }
            }
        },
        legend: {
            enabled: true
        }
    };

    /**
     * initialize the providerIdentity count chart
     */
    var genderChart = new Highcharts.Chart(chart_3_1_ChartOptions);
    genderChart.showLoading();

    /***************************************************************
     * start of time of day chart
     * container: chart_3_1
     ***************************************************************/

    var chart_4_1_Options = {
        chart: {
            renderTo: 'chart_4_1',
            backgroundColor: '#FFFFFF',
            type: 'area'
        },
        xAxis: {
            type: 'category'
        },
        tooltip: {
            shared: true,
            formatter: function () {
                var tooltipcontent = '<b>Between ' + this.x + ':00 and ' + (this.x+1) + ':00</b>';
                // we have to loop here as we don't yet know how many series we will have
                $.each(this.points, function () {
                    tooltipcontent += '<br/>' + this.series.name + ': ' + this.y.toLocaleString();
                });

                return tooltipcontent;
            }
        },
        legend: {
            enabled: true
        }
    };

    /**
     * initialize the timeOfDay average chart
     */
    var chart_4_1 = new Highcharts.Chart(chart_4_1_Options);
    chart_4_1.showLoading();

    /***************************************************************
     * start of genderCompareAgeChartOptions count chart
     * container: chart_3_2
     ***************************************************************/
    var genderCompareAgeChartOptions = {
        chart: {
            renderTo:        'chart_3_2',
            backgroundColor: '#FFFFFF',
            type:            'column'
        },
        xAxis: {
            type: 'category'
        },
        tooltip: {
            shared: true,
            useHTML: true,
            formatter: function () {
                // var tooltipcontent = '<b>' + this.x + '</b>';
                var mySum = 0;
                var tooltipcontent = '<table style="width:100%">';

                /**
                 * we have to loop here as we don't yet know how many series we will have
                 */
                $.each(this.points, function () {
                    var symbol = '■';
                    tooltipcontent += '<tr><td><span style="color:' + this.point.color + '">' + symbol + '</span> ' + this.series.name + ':</td><td style="text-align: right;">' + this.y.toLocaleString() + '</td></tr>';
                    mySum += this.y;
                });

                tooltipcontent += '<tr><td><b>Total:</b></td><td style="text-align: right;"><b>' + mySum.toLocaleString() + '</b><td></tr>';
                tooltipcontent += '</table>';
                return tooltipcontent;
            }
        },
        plotOptions: {
            column: {
                borderWidth: 0,
                stacking: 'normal'
            }
        },
        legend: {
            enabled: true
        }
    };

    /**
     * initialize the providerIdentity count chart
     */
    var genderCompareAgeChart = new Highcharts.Chart(genderCompareAgeChartOptions);
    genderCompareAgeChart.showLoading();

    /***************************************************************
     * end of genderCompareAgeChartOptions count chart
     ***************************************************************/

    /***************************************************************
     * end preparations for the individual charts
     ***************************************************************/



    /***************************************************************
     * all AJAX calls go here
     ***************************************************************/

    /**
     * ajax function to get today's average dwell time
     */
    $.ajax({
        url: site.uri.public + '/elephantwifi/api/dwelltime/average/' + startToday + "/" + now,
        type: 'GET',
        dataType: 'json',
        success: onAvgDwelltimeDataReceived,
        error: flashToasts
    });

    /**
     * ajax function to get visitor counts for users primary_venue
     */
    $.ajax({
        url: site.uri.public + '/elephantwifi/api/list/daily_visitor_counts/' + previous14daysRangeStart + "/" + startToday,
        type: 'GET',
        dataType: 'json',
        success: onVisitorCountsDataReceived,
        error: flashToasts
    });

    /**
     * get the durations data with ajax
     */
    $.ajax({
        url: site.uri.public + '/elephantwifi/api/stats/venue/authorised_visitors_durations/' + previous7daysRangeStart + '/' + startToday,
        type: 'GET',
        dataType: 'json',
        success: onDurationsDataReceived,
        error: flashToasts
    });

    /**
     * get the registered with data with ajax
     */
    $.ajax({
        url: site.uri.public + '/elephantwifi/api/stats/venue/provider_identity_count/' + previous30daysRangeStart,
        type: 'GET',
        dataType: 'json',
        success: onProviderIdentityCountDataReceived,
        error: flashToasts
    });

    /**
     * get the males vs females data with ajax
     */
    $.ajax({
        url: site.uri.public + '/elephantwifi/api/stats/venue/males_vs_females_count/' + previous30daysRangeStart + '/' + startToday,
        type: 'GET',
        dataType: 'json',
        success: onGenderCountDataReceived,
        error: flashToasts
    });

    /**
     * get the males vs females comapred to age data with ajax
     */
    $.ajax({
        url: site.uri.public + '/elephantwifi/api/stats/venue/males_vs_females_compare_age_count/' + previous30daysRangeStart + '/' + startToday,
        type: 'GET',
        dataType: 'json',
        success: onGenderCompareAgeCountDataReceived,
        error: flashToasts
    });

    /**
     * get the data for chart 3.1
     */
    $.ajax({
        url: '{{site.uri.public}}/elephantwifi/api/authorised_visitors_per_hourofday/' + previous7daysRangeStart + '/' + startToday,
        type: 'GET',
        dataType: 'json',
        success: chart_4_1_DataReceived
    });

    /**
    * get the device data with ajax
    */
    $.ajax({
        url: site.uri.public + '/elephantwifi/api/list/unique_visitor_connections/' + startToday / 1000,
        type: 'GET',
        dataType: 'json',
        success: onVisitorConnectionDataReceived,
        error: flashToasts
    });

    /***************************************************************
     * other shared functions from here
     ***************************************************************/

    /**
     * whatever we want to do on resize of window and/or collapse of sidebar
     */
    $(window).resize(function(){
        //setTimeout(dosomething, 200);
    });

    /***************************************************************
     * functions to periodically refresh ajax data from here
     ***************************************************************/

    /**
     * refresh the connected user count every 30 seconds, starting immediately
     * NOTE:
     * remember to ensure any vars that are used by the ajax functions are "fresh"
     * TO DO:
     * - add some form of feedback to the user (e.g. spinner)?
     */
    refreshDashboardMetrics();
    setInterval(refreshDashboardMetrics, 30*1000);

    function refreshDashboardMetrics() {
        /**
         * ajax function to get current venue health metrics
         */
        $.ajax({
            url:        site.uri.public + '/elephantwifi/api/controller_users/online',
            type:       'GET',
            dataType:   'json',
            success:    onSiteHealthMetricsReceived,
            error:      flashToasts
        });
    }

    function convertUpperCase(str)
    {
        return str.replace(/\w\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});
    }
});
</script>
{% endblock %}